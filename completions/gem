# Auto-generated with h2o

_gem()
{
    local cur prev words cword
    _init_completion -s || return

    local cmd i subcommands
    local subcommands=" build cert check cleanup contents dependency environment fetch generate_index help info install list lock mirror open outdated owner pristine push rdoc search server signin signout sources specification stale uninstall unpack update which yank"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        build) _gem_build
            return
            ;;

        cert) _gem_cert
            return
            ;;

        check) _gem_check
            return
            ;;

        cleanup) _gem_cleanup
            return
            ;;

        contents) _gem_contents
            return
            ;;

        dependency) _gem_dependency
            return
            ;;

        environment) _gem_environment
            return
            ;;

        fetch) _gem_fetch
            return
            ;;

        generate_index) _gem_generateindex
            return
            ;;

        help) _gem_help
            return
            ;;

        info) _gem_info
            return
            ;;

        install) _gem_install
            return
            ;;

        list) _gem_list
            return
            ;;

        lock) _gem_lock
            return
            ;;

        mirror) _gem_mirror
            return
            ;;

        open) _gem_open
            return
            ;;

        outdated) _gem_outdated
            return
            ;;

        owner) _gem_owner
            return
            ;;

        pristine) _gem_pristine
            return
            ;;

        push) _gem_push
            return
            ;;

        rdoc) _gem_rdoc
            return
            ;;

        search) _gem_search
            return
            ;;

        server) _gem_server
            return
            ;;

        signin) _gem_signin
            return
            ;;

        signout) _gem_signout
            return
            ;;

        sources) _gem_sources
            return
            ;;

        specification) _gem_specification
            return
            ;;

        stale) _gem_stale
            return
            ;;

        uninstall) _gem_uninstall
            return
            ;;

        unpack) _gem_unpack
            return
            ;;

        update) _gem_update
            return
            ;;

        which) _gem_which
            return
            ;;

        yank) _gem_yank
            return
            ;;

    esac

    local word_list=" build cert check cleanup contents dependency environment fetch generate_index help info install list lock mirror open outdated owner pristine push rdoc search server signin signout sources specification stale uninstall unpack update which yank -h --help -v --version"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_gem_build()
{
    local word_list="  --platform --force --strict -o --output -C -h --help -V --verbose -V --no-verbose -q --quiet --silent --config-file --backtrace --debug --norc"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_gem_cert()
{
    local word_list="  -a --add -l --list -r --remove -b --build -C --certificate -K --private-key -A --key-algorithm -s --sign -d --days -R --re-sign -h --help -V --verbose -V --no-verbose -q --quiet --silent --config-file --backtrace --debug --norc"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_gem_check()
{
    local word_list="  -a --alien -a --no-alien --doctor --no-doctor --dry-run --no-dry-run --gems --no-gems -v --version -h --help -V --verbose -V --no-verbose -q --quiet --silent --config-file --backtrace --debug --norc"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_gem_cleanup()
{
    local word_list="  -n -d --dry-run -D --check-development -D --no-check-development --user-install --no-user-install --dryrun -h --help -V --verbose -V --no-verbose -q --quiet --silent --config-file --backtrace --debug --norc"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_gem_contents()
{
    local word_list="  -v --version --all -s --spec-dir -l --lib-only -l --no-lib-only --prefix --no-prefix --show-install-dir --no-show-install-dir -h --help -V --verbose -V --no-verbose -q --quiet --silent --config-file --backtrace --debug --norc"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_gem_dependency()
{
    local word_list="  -v --version --platform --prerelease --no-prerelease -R --reverse-dependencies -R --no-reverse-dependencies --pipe -u --update-sources -u --no-update-sources -l --local -r --remote -b --both -B --bulk-threshold --clear-sources -s --source -h --help -V --verbose -V --no-verbose -q --quiet --silent --config-file --backtrace --debug --norc"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_gem_environment()
{
    local word_list="  -h --help -V --verbose -V --no-verbose -q --quiet --silent --config-file --backtrace --debug --norc"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_gem_fetch()
{
    local word_list="  -v --version --platform --prerelease --no-prerelease --suggestions --no-suggestions -B --bulk-threshold -p --http-proxy -s --source --clear-sources -h --help -V --verbose -V --no-verbose -q --quiet --silent --config-file --backtrace --debug --norc"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_gem_generateindex()
{
    local word_list="  -d --directory --modern --no-modern --update -h --help -V --verbose -V --no-verbose -q --quiet --silent --config-file --backtrace --debug --norc"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_gem_help()
{
    local word_list="  -h --help -V --verbose -V --no-verbose -q --quiet --silent --config-file --backtrace --debug --norc"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_gem_info()
{
    local word_list="  -i --installed -i --no-installed -I -v --version --versions --no-versions -a --all -e --exact --prerelease --no-prerelease -u --update-sources -u --no-update-sources -l --local -r --remote -b --both -B --bulk-threshold --clear-sources -s --source -h --help -V --verbose -V --no-verbose -q --quiet --silent --config-file --backtrace --debug --norc"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_gem_install()
{
    local word_list="  --platform -v --version --prerelease --no-prerelease -u --update-sources -u --no-update-sources -i --install-dir -n --bindir --document --build-root --vendor -N --no-document -E --env-shebang -E --no-env-shebang -f --force -f --no-force -w --wrappers -w --no-wrappers -P --trust-policy --ignore-dependencies --format-executable --no-format-executable --user-install --no-user-install --development --development-all --conservative --minimal-deps --no-minimal-deps --post-install-message --no-post-install-message -g --file --without --default --explain --lock --no-lock --suggestions --no-suggestions -l --local -r --remote -b --both -B --bulk-threshold --clear-sources -s --source -h --help -V --verbose -V --no-verbose -q --quiet --silent --config-file --backtrace --debug --norc"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_gem_list()
{
    local word_list="  -i --installed -i --no-installed -I -v --version -d --details -d --no-details --versions --no-versions -a --all -e --exact --prerelease --no-prerelease -u --update-sources -u --no-update-sources -l --local -r --remote -b --both -B --bulk-threshold --clear-sources -s --source -h --help -V --verbose -V --no-verbose -q --quiet --silent --config-file --backtrace --debug --norc"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_gem_lock()
{
    local word_list="  -s --strict -s --no-strict -h --help -V --verbose -V --no-verbose -q --quiet --silent --config-file --backtrace --debug --norc"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_gem_mirror()
{
    local word_list="  -h --help -V --verbose -V --no-verbose -q --quiet --silent --config-file --backtrace --debug --norc"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_gem_open()
{
    local word_list="  -e --editor -v --version -h --help -V --verbose -V --no-verbose -q --quiet --silent --config-file --backtrace --debug --norc"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_gem_outdated()
{
    local word_list="  --platform -u --update-sources -u --no-update-sources -l --local -r --remote -b --both -B --bulk-threshold --clear-sources -s --source -h --help -V --verbose -V --no-verbose -q --quiet --silent --config-file --backtrace --debug --norc"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_gem_owner()
{
    local word_list="  -k --key --otp -a --add -r --remove --host -h --help -V --verbose -V --no-verbose -q --quiet --silent --config-file --backtrace --debug --norc"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_gem_pristine()
{
    local word_list="  --all --skip --extensions --no-extensions --only-executables --only-plugins -E --env-shebang -E --no-env-shebang -i --install-dir -n --bindir -v --version -h --help -V --verbose -V --no-verbose -q --quiet --silent --config-file --backtrace --debug --norc"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_gem_push()
{
    local word_list="  -k --key --otp --host -h --help -V --verbose -V --no-verbose -q --quiet --silent --config-file --backtrace --debug --norc"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_gem_rdoc()
{
    local word_list="  --all --rdoc --no-rdoc --ri --no-ri --overwrite --no-overwrite -v --version -h --help -V --verbose -V --no-verbose -q --quiet --silent --config-file --backtrace --debug --norc"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_gem_search()
{
    local word_list="  -i --installed -i --no-installed -I -v --version -d --details --versions --no-versions -a --all -e --exact --prerelease --no-prerelease -u --update-sources -u --no-update-sources -l --local -r --remote -b --both -B --bulk-threshold -p --http-proxy --clear-sources -s --source -h --help -V --verbose -V --no-verbose -q --quiet --silent --config-file --backtrace --debug --norc"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_gem_server()
{
    local word_list="  -h --help -V --verbose -V --no-verbose -q --quiet --silent --config-file --backtrace --debug --norc"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_gem_signin()
{
    local word_list="  --host --otp -h --help -V --verbose -V --no-verbose -q --quiet --silent --config-file --backtrace --debug --norc"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_gem_signout()
{
    local word_list="  -h --help -V --verbose -V --no-verbose -q --quiet --silent --config-file --backtrace --debug --norc"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_gem_sources()
{
    local word_list="  -a --add -l --list -r --remove -c --clear-all -u --update -f --force -f --no-force -h --help -V --verbose -V --no-verbose -q --quiet --silent --config-file --backtrace --debug --norc"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_gem_specification()
{
    local word_list="  -v --version --platform --prerelease --no-prerelease --all --ruby --yaml --marshal -u --update-sources -u --no-update-sources -l --local -r --remote -b --both -B --bulk-threshold --clear-sources -s --source -h --help -V --verbose -V --no-verbose -q --quiet --silent --config-file --backtrace --debug --norc"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_gem_stale()
{
    local word_list="  -h --help -V --verbose -V --no-verbose -q --quiet --silent --config-file --backtrace --debug --norc"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_gem_uninstall()
{
    local word_list="  -a --all -a --no-all -I --ignore-dependencies -I --no-ignore-dependencies -D --check-development -D --no-check-development -x --executables -x --no-executables -i --install-dir -n --bindir --user-install --no-user-install --format-executable --no-format-executable --force --no-force --abort-on-dependent --no-abort-on-dependent -v --version --platform --vendor -h --help -V --verbose -V --no-verbose -q --quiet --silent --config-file --backtrace --debug --norc"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_gem_unpack()
{
    local word_list="  --target --spec -v --version -P --trust-policy -h --help -V --verbose -V --no-verbose -q --quiet --silent --config-file --backtrace --debug --norc"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_gem_update()
{
    local word_list="  --system --platform --prerelease --no-prerelease -u --update-sources -u --no-update-sources -i --install-dir -n --bindir --document --build-root --vendor -N --no-document -E --env-shebang -E --no-env-shebang -f --force -f --no-force -w --wrappers -w --no-wrappers -P --trust-policy --ignore-dependencies --format-executable --no-format-executable --user-install --no-user-install --development --development-all --conservative --minimal-deps --no-minimal-deps --post-install-message --no-post-install-message -g --file --without --default --explain --lock --no-lock --suggestions --no-suggestions -l --local -r --remote -b --both -B --bulk-threshold --clear-sources -s --source -h --help -V --verbose -V --no-verbose -q --quiet --silent --config-file --backtrace --debug --norc"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_gem_which()
{
    local word_list="  -a --all -a --no-all -g --gems-first -g --no-gems-first -h --help -V --verbose -V --no-verbose -q --quiet --silent --config-file --backtrace --debug --norc"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_gem_yank()
{
    local word_list="  -v --version --platform --otp --host -k --key -h --help -V --verbose -V --no-verbose -q --quiet --silent --config-file --backtrace --debug --norc"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

## -o bashdefault and -o default are fallback
complete -o bashdefault -o default -F _gem gem
