# Auto-generated with h2o

_uv()
{
    local cur prev words cword
    _init_completion -s || return

    local cmd i subcommands
    local subcommands=" run init add remove sync lock export tree tool python pip venv build publish cache self version help"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        run) _uv_run
            return
            ;;

        init) _uv_init
            return
            ;;

        add) _uv_add
            return
            ;;

        remove) _uv_remove
            return
            ;;

        sync) _uv_sync
            return
            ;;

        lock) _uv_lock
            return
            ;;

        export) _uv_export
            return
            ;;

        tree) _uv_tree
            return
            ;;

        tool) _uv_tool
            return
            ;;

        python) _uv_python
            return
            ;;

        pip) _uv_pip
            return
            ;;

        venv) _uv_venv
            return
            ;;

        build) _uv_build
            return
            ;;

        publish) _uv_publish
            return
            ;;

        cache) _uv_cache
            return
            ;;

        self) _uv_self
            return
            ;;

        version) _uv_version
            return
            ;;

        help) _uv_help
            return
            ;;

    esac

    local word_list=" run init add remove sync lock export tree tool python pip venv build publish cache self version help -n --no-cache --cache-dir --managed-python --no-managed-python --no-python-downloads -q --quiet -v --verbose --color --native-tls --offline --allow-insecure-host --no-progress --directory --project --config-file --no-config -h --help -V --version"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_uv_run()
{
    local word_list="  --extra --all-extras --no-extra --no-dev --group --no-group --no-default-groups --only-group --all-groups -m --module --only-dev --no-editable --exact --env-file --no-env-file --with --with-editable --with-requirements --isolated --active --no-sync --locked --frozen -s --script --gui-script --all-packages --package --no-project --index --default-index -i --index-url --extra-index-url -f --find-links --no-index --index-strategy --keyring-provider -U --upgrade -P --upgrade-package --resolution --prerelease --fork-strategy --exclude-newer --no-sources --reinstall --reinstall-package --link-mode --compile-bytecode -C --config-setting --no-build-isolation --no-build-isolation-package --no-build --no-build-package --no-binary --no-binary-package -n --no-cache --cache-dir --refresh --refresh-package -p --python --managed-python --no-managed-python --no-python-downloads --color --native-tls --offline --allow-insecure-host --no-progress --directory --project --config-file --no-config -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_uv_init()
{
    local word_list="  --name --bare --package --no-package --app --lib --script --description --no-description --vcs --build-backend --no-readme --author-from --no-pin-python --no-workspace -p --python --managed-python --no-managed-python --no-python-downloads -n --no-cache --cache-dir --color --native-tls --offline --allow-insecure-host --no-progress --directory --project --config-file --no-config -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_uv_add()
{
    local word_list="  -r --requirements -c --constraints -m --marker --dev --optional --group --editable --raw-sources --rev --tag --branch --extra --no-sync --locked --frozen --active --package --script --index --default-index -i --index-url --extra-index-url -f --find-links --no-index --index-strategy --keyring-provider -U --upgrade -P --upgrade-package --resolution --prerelease --fork-strategy --exclude-newer --no-sources --reinstall --reinstall-package --link-mode --compile-bytecode -C --config-setting --no-build-isolation --no-build-isolation-package --no-build --no-build-package --no-binary --no-binary-package -n --no-cache --cache-dir --refresh --refresh-package -p --python --managed-python --no-managed-python --no-python-downloads --color --native-tls --offline --allow-insecure-host --no-progress --directory --project --config-file --no-config -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_uv_remove()
{
    local word_list="  --dev --optional --group --no-sync --active --locked --frozen --package --script --index --default-index -i --index-url --extra-index-url -f --find-links --no-index --index-strategy --keyring-provider -U --upgrade -P --upgrade-package --resolution --prerelease --fork-strategy --exclude-newer --no-sources --reinstall --reinstall-package --link-mode --compile-bytecode -C --config-setting --no-build-isolation --no-build-isolation-package --no-build --no-build-package --no-binary --no-binary-package -n --no-cache --cache-dir --refresh --refresh-package -p --python --managed-python --no-managed-python --no-python-downloads --color --native-tls --offline --allow-insecure-host --no-progress --directory --project --config-file --no-config -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_uv_sync()
{
    local word_list="  --extra --all-extras --no-extra --no-dev --only-dev --group --no-group --no-default-groups --only-group --all-groups --no-editable --inexact --active --no-install-project --no-install-workspace --no-install-package --locked --frozen --dry-run --all-packages --package --script --check --index --default-index -i --index-url --extra-index-url -f --find-links --no-index --index-strategy --keyring-provider -U --upgrade -P --upgrade-package --resolution --prerelease --fork-strategy --exclude-newer --no-sources --reinstall --reinstall-package --link-mode --compile-bytecode -C --config-setting --no-build-isolation --no-build-isolation-package --no-build --no-build-package --no-binary --no-binary-package -n --no-cache --cache-dir --refresh --refresh-package -p --python --managed-python --no-managed-python --no-python-downloads --color --native-tls --offline --allow-insecure-host --no-progress --directory --project --config-file --no-config -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_uv_lock()
{
    local word_list="  --check --check-exists --dry-run --script --index --default-index -i --index-url --extra-index-url -f --find-links --no-index --index-strategy --keyring-provider -U --upgrade -P --upgrade-package --resolution --prerelease --fork-strategy --exclude-newer --no-sources -C --config-setting --no-build-isolation --no-build-isolation-package --no-build --no-build-package --no-binary --no-binary-package --link-mode -n --no-cache --cache-dir --refresh --refresh-package -p --python --managed-python --no-managed-python --no-python-downloads --color --native-tls --offline --allow-insecure-host --no-progress --directory --project --config-file --no-config -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_uv_export()
{
    local word_list="  --format --all-packages --package --prune --extra --all-extras --no-extra --no-dev --only-dev --group --no-group --no-default-groups --only-group --all-groups --no-annotate --no-header --no-editable --no-hashes -o --output-file --no-emit-project --no-emit-workspace --no-emit-package --locked --frozen --script --index --default-index -i --index-url --extra-index-url -f --find-links --no-index --index-strategy --keyring-provider -U --upgrade -P --upgrade-package --resolution --prerelease --fork-strategy --exclude-newer --no-sources -C --config-setting --no-build-isolation --no-build-isolation-package --no-build --no-build-package --no-binary --no-binary-package --link-mode -n --no-cache --cache-dir --refresh --refresh-package -p --python --managed-python --no-managed-python --no-python-downloads --color --native-tls --offline --allow-insecure-host --no-progress --directory --project --config-file --no-config -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_uv_tree()
{
    local word_list="  --universal -d --depth --prune --package --no-dedupe --invert --outdated --only-dev --no-dev --group --no-group --no-default-groups --only-group --all-groups --locked --frozen --script --python-version --python-platform --no-build --no-build-package --no-binary --no-binary-package -C --config-setting --no-build-isolation --no-build-isolation-package --index --default-index -i --index-url --extra-index-url -f --find-links --no-index --index-strategy --keyring-provider -U --upgrade -P --upgrade-package --resolution --prerelease --fork-strategy --exclude-newer --no-sources --link-mode -p --python --managed-python --no-managed-python --no-python-downloads -n --no-cache --cache-dir --color --native-tls --offline --allow-insecure-host --no-progress --directory --project --config-file --no-config -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_uv_tool()
{
    local cmd i subcommands
    local subcommands=" run install upgrade list uninstall update-shell dir"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        run) _uv_tool_run
            return
            ;;

        install) _uv_tool_install
            return
            ;;

        upgrade) _uv_tool_upgrade
            return
            ;;

        list) _uv_tool_list
            return
            ;;

        uninstall) _uv_tool_uninstall
            return
            ;;

        update-shell) _uv_tool_updateshell
            return
            ;;

        dir) _uv_tool_dir
            return
            ;;

    esac

    local word_list=" run install upgrade list uninstall update-shell dir -n --no-cache --cache-dir --managed-python --no-managed-python --no-python-downloads --color --native-tls --offline --allow-insecure-host --no-progress --directory --project --config-file --no-config -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_uv_tool_run()
{
    local word_list="  --from --with --with-editable --with-requirements -c --constraints -b --build-constraints --overrides --isolated --env-file --no-env-file --index --default-index -i --index-url --extra-index-url -f --find-links --no-index --index-strategy --keyring-provider -U --upgrade -P --upgrade-package --resolution --prerelease --fork-strategy --exclude-newer --no-sources --reinstall --reinstall-package --link-mode --compile-bytecode -C --config-setting --no-build-isolation --no-build-isolation-package --no-build --no-build-package --no-binary --no-binary-package -n --no-cache --cache-dir --refresh --refresh-package -p --python --managed-python --no-managed-python --no-python-downloads --color --native-tls --offline --allow-insecure-host --no-progress --directory --project --config-file --no-config -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_uv_tool_install()
{
    local word_list="  --with --with-requirements -e --editable --with-editable -c --constraints --overrides -b --build-constraints --force --index --default-index -i --index-url --extra-index-url -f --find-links --no-index --index-strategy --keyring-provider -U --upgrade -P --upgrade-package --resolution --prerelease --fork-strategy --exclude-newer --no-sources --reinstall --reinstall-package --link-mode --compile-bytecode -C --config-setting --no-build-isolation --no-build-isolation-package --no-build --no-build-package --no-binary --no-binary-package -n --no-cache --cache-dir --refresh --refresh-package -p --python --managed-python --no-managed-python --no-python-downloads --color --native-tls --offline --allow-insecure-host --no-progress --directory --project --config-file --no-config -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_uv_tool_upgrade()
{
    local word_list="  --all -p --python --managed-python --no-managed-python --no-python-downloads --resolution --prerelease --fork-strategy --exclude-newer --no-sources --index --default-index -i --index-url --extra-index-url -f --find-links --no-index --index-strategy --keyring-provider --reinstall --reinstall-package --link-mode --compile-bytecode -C --config-setting --no-build-isolation --no-build-isolation-package --no-build --no-build-package --no-binary --no-binary-package -n --no-cache --cache-dir --color --native-tls --offline --allow-insecure-host --no-progress --directory --project --config-file --no-config -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_uv_tool_list()
{
    local word_list="  --show-paths --show-version-specifiers --show-with -n --no-cache --cache-dir --managed-python --no-managed-python --color --native-tls --offline --allow-insecure-host --no-progress --directory --project --config-file --no-config -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_uv_tool_uninstall()
{
    local word_list="  --all -n --no-cache --cache-dir --managed-python --no-managed-python --no-python-downloads --color --native-tls --offline --allow-insecure-host --no-progress --directory --project --config-file --no-config -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_uv_tool_updateshell()
{
    local word_list="  -n --no-cache --cache-dir --managed-python --no-managed-python --no-python-downloads --color --native-tls --offline --allow-insecure-host --no-progress --directory --project --config-file --no-config -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_uv_tool_dir()
{
    local word_list="  --bin -n --no-cache --cache-dir --managed-python --no-managed-python --no-python-downloads --color --native-tls --offline --allow-insecure-host --no-progress --directory --project --config-file --no-config -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_uv_python()
{
    local cmd i subcommands
    local subcommands=" list install find pin dir uninstall"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        list) _uv_python_list
            return
            ;;

        install) _uv_python_install
            return
            ;;

        find) _uv_python_find
            return
            ;;

        pin) _uv_python_pin
            return
            ;;

        dir) _uv_python_dir
            return
            ;;

        uninstall) _uv_python_uninstall
            return
            ;;

    esac

    local word_list=" list install find pin dir uninstall -n --no-cache --cache-dir --managed-python --no-managed-python --no-python-downloads --color --native-tls --offline --allow-insecure-host --no-progress --directory --project --config-file --no-config -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_uv_python_list()
{
    local word_list="  --all-versions --all-platforms --all-arches --only-installed --only-downloads --show-urls --output-format --python-downloads-json-url -n --no-cache --cache-dir --managed-python --no-managed-python --no-python-downloads --color --native-tls --offline --allow-insecure-host --no-progress --directory --project --config-file --no-config -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_uv_python_install()
{
    local word_list="  -i --install-dir --mirror --pypy-mirror --python-downloads-json-url -r --reinstall -f --force --default -n --no-cache --cache-dir --managed-python --no-managed-python --no-python-downloads --color --native-tls --offline --allow-insecure-host --no-progress --directory --project --config-file --no-config -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_uv_python_find()
{
    local word_list="  --no-project --system --script --show-version -n --no-cache --cache-dir --managed-python --no-managed-python --no-python-downloads --color --native-tls --offline --allow-insecure-host --no-progress --directory --project --config-file --no-config -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_uv_python_pin()
{
    local word_list="  --resolved --no-project --global -n --no-cache --cache-dir --managed-python --no-managed-python --no-python-downloads --color --native-tls --offline --allow-insecure-host --no-progress --directory --project --config-file --no-config -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_uv_python_dir()
{
    local word_list="  --bin -n --no-cache --cache-dir --managed-python --no-managed-python --no-python-downloads --color --native-tls --offline --allow-insecure-host --no-progress --directory --project --config-file --no-config -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_uv_python_uninstall()
{
    local word_list="  -i --install-dir --all -n --no-cache --cache-dir --managed-python --no-managed-python --no-python-downloads --color --native-tls --offline --allow-insecure-host --no-progress --directory --project --config-file --no-config -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_uv_pip()
{
    local cmd i subcommands
    local subcommands=" compile sync install uninstall freeze list show tree check"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        compile) _uv_pip_compile
            return
            ;;

        sync) _uv_pip_sync
            return
            ;;

        install) _uv_pip_install
            return
            ;;

        uninstall) _uv_pip_uninstall
            return
            ;;

        freeze) _uv_pip_freeze
            return
            ;;

        list) _uv_pip_list
            return
            ;;

        show) _uv_pip_show
            return
            ;;

        tree) _uv_pip_tree
            return
            ;;

        check) _uv_pip_check
            return
            ;;

    esac

    local word_list=" compile sync install uninstall freeze list show tree check -n --no-cache --cache-dir --managed-python --no-managed-python --no-python-downloads --color --native-tls --offline --allow-insecure-host --no-progress --directory --project --config-file --no-config -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_uv_pip_compile()
{
    local word_list="  -c --constraints --overrides -b --build-constraints --extra --all-extras --no-deps --group -o --output-file --format --no-strip-extras --no-strip-markers --no-annotate --no-header --annotation-style --custom-compile-command --system --generate-hashes --no-build --no-binary --only-binary --python-platform --universal --no-emit-package --emit-index-url --emit-find-links --emit-build-options --emit-index-annotation --torch-backend --index --default-index -i --index-url --extra-index-url -f --find-links --no-index --index-strategy --keyring-provider -U --upgrade -P --upgrade-package --resolution --prerelease --fork-strategy --exclude-newer --no-sources -C --config-setting --no-build-isolation --no-build-isolation-package --link-mode -n --no-cache --cache-dir --refresh --refresh-package -p --python --python-version --managed-python --no-managed-python --no-python-downloads --color --native-tls --offline --allow-insecure-host --no-progress --directory --project --config-file -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_uv_pip_sync()
{
    local word_list="  -c --constraints -b --build-constraints --require-hashes --no-verify-hashes --system --break-system-packages --no-break-system-packages --target --prefix --no-build --no-binary --only-binary --allow-empty-requirements --no-allow-empty-requirements --python-version --python-platform --strict --dry-run --torch-backend --index --default-index -i --index-url --extra-index-url -f --find-links --no-index --index-strategy --keyring-provider --reinstall --reinstall-package --link-mode --compile-bytecode -C --config-setting --no-build-isolation --exclude-newer --no-sources -n --no-cache --refresh --cache-dir --refresh-package -p --python --managed-python --no-managed-python --no-python-downloads --color --native-tls --offline --allow-insecure-host --no-progress --directory --project --config-file -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_uv_pip_install()
{
    local word_list="  -r --requirements -e --editable -c --constraints --overrides -b --build-constraints --extra --all-extras --no-deps --group --require-hashes --no-verify-hashes --system --break-system-packages --no-break-system-packages --target --prefix --no-build --no-binary --only-binary --python-version --python-platform --exact --strict --dry-run --torch-backend --index --default-index -i --index-url --extra-index-url -f --find-links --no-index --index-strategy --keyring-provider -U --upgrade -P --upgrade-package --resolution --prerelease --fork-strategy --exclude-newer --no-sources --reinstall --reinstall-package --link-mode --compile-bytecode -C --config-setting --no-build-isolation --no-build-isolation-package -n --no-cache --cache-dir --refresh --refresh-package -p --python --managed-python --no-managed-python --no-python-downloads --color --native-tls --offline --allow-insecure-host --no-progress --directory --project --config-file --no-config -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_uv_pip_uninstall()
{
    local word_list="  -r --requirements --keyring-provider --system --break-system-packages --no-break-system-packages --target --prefix --dry-run -p --python --managed-python --no-managed-python --no-python-downloads -n --no-cache --cache-dir --color --native-tls --offline --allow-insecure-host --no-progress --directory --project --config-file --no-config -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_uv_pip_freeze()
{
    local word_list="  --exclude-editable --strict --path --system -p --python --managed-python --no-managed-python --no-python-downloads -n --no-cache --cache-dir --color --native-tls --offline --allow-insecure-host --no-progress --directory --project --config-file --no-config -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_uv_pip_list()
{
    local word_list="  -e --editable --exclude-editable --exclude --format --outdated --strict --system --index --default-index -i --index-url --extra-index-url -f --find-links --no-index --index-strategy --keyring-provider --exclude-newer -p --python --managed-python --no-managed-python --no-python-downloads -n --no-cache --cache-dir --color --native-tls --offline --allow-insecure-host --no-progress --directory --project --config-file --no-config -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_uv_pip_show()
{
    local word_list="  --strict -f --files --system -p --python --managed-python --no-managed-python --no-python-downloads -n --no-cache --cache-dir --color --native-tls --offline --allow-insecure-host --no-progress --directory --project --config-file --no-config -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_uv_pip_tree()
{
    local word_list="  --show-version-specifiers -d --depth --prune --package --no-dedupe --invert --outdated --strict --system --index --default-index -i --index-url --extra-index-url -f --find-links --no-index --index-strategy --keyring-provider --exclude-newer -p --python --managed-python --no-managed-python --no-python-downloads -n --no-cache --cache-dir --color --native-tls --offline --allow-insecure-host --no-progress --directory --project --config-file --no-config -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_uv_pip_check()
{
    local word_list="  --system -p --python --managed-python --no-managed-python --no-python-downloads -n --no-cache --cache-dir --color --native-tls --offline --allow-insecure-host --no-progress --directory --project --config-file --no-config -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_uv_venv()
{
    local word_list="  --no-project --seed --allow-existing --prompt --system-site-packages --relocatable --index-strategy --keyring-provider --exclude-newer --link-mode -p --python --managed-python --no-managed-python --no-python-downloads --index --default-index -i --index-url --extra-index-url -f --find-links --no-index --refresh -n --no-cache --refresh-package --cache-dir --color --native-tls --offline --allow-insecure-host --no-progress --directory --project --config-file --no-config -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_uv_build()
{
    local word_list="  --package --all-packages -o --out-dir --sdist --wheel --no-build-logs --force-pep517 -b --build-constraints --require-hashes --no-verify-hashes -p --python --managed-python --no-managed-python --no-python-downloads --index --default-index -i --index-url --extra-index-url -f --find-links --no-index --index-strategy --keyring-provider -U --upgrade -P --upgrade-package --resolution --prerelease --fork-strategy --exclude-newer --no-sources -C --config-setting --no-build-isolation --no-build-isolation-package --no-build --no-build-package --no-binary --no-binary-package --link-mode -n --no-cache --cache-dir --refresh --refresh-package --color --native-tls --offline --allow-insecure-host --no-progress --directory --project --config-file --no-config -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_uv_publish()
{
    local word_list="  --index -u --username -p --password -t --token --trusted-publishing --keyring-provider --publish-url --check-url -n --no-cache --cache-dir --managed-python --no-managed-python --no-python-downloads --color --native-tls --offline --allow-insecure-host --no-progress --directory --project --config-file --no-config -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_uv_cache()
{
    local cmd i subcommands
    local subcommands=" clean prune dir"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        clean) _uv_cache_clean
            return
            ;;

        prune) _uv_cache_prune
            return
            ;;

        dir) _uv_cache_dir
            return
            ;;

    esac

    local word_list=" clean prune dir -n --no-cache --cache-dir --managed-python --no-managed-python --no-python-downloads --color --native-tls --offline --allow-insecure-host --no-progress --directory --project --config-file --no-config -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_uv_cache_clean()
{
    local word_list="  -n --no-cache --cache-dir --managed-python --no-managed-python --no-python-downloads --color --native-tls --offline --allow-insecure-host --no-progress --directory --project --config-file --no-config -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_uv_cache_prune()
{
    local word_list="  --ci -n --no-cache --cache-dir --managed-python --no-managed-python --no-python-downloads --color --native-tls --offline --allow-insecure-host --no-progress --directory --project --config-file --no-config -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_uv_cache_dir()
{
    local word_list="  -n --no-cache --cache-dir --managed-python --no-managed-python --no-python-downloads --color --native-tls --offline --allow-insecure-host --no-progress --directory --project --config-file --no-config -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_uv_self()
{
    local cmd i subcommands
    local subcommands=" update version"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        update) _uv_self_update
            return
            ;;

        version) _uv_self_version
            return
            ;;

    esac

    local word_list=" update version -n --no-cache --cache-dir --managed-python --no-managed-python --no-python-downloads --color --native-tls --offline --allow-insecure-host --no-progress --directory --project --config-file --no-config -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_uv_self_update()
{
    local word_list="  --token --dry-run -n --no-cache --cache-dir --managed-python --no-managed-python --no-python-downloads --color --native-tls --offline --allow-insecure-host --no-progress --directory --project --config-file --no-config -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_uv_self_version()
{
    local word_list="  --short --output-format -n --no-cache --cache-dir --managed-python --no-managed-python --no-python-downloads --color --native-tls --offline --allow-insecure-host --no-progress --directory --project --config-file --no-config -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_uv_version()
{
    local word_list="  --bump --dry-run --short --output-format -n --no-cache --cache-dir --managed-python --no-managed-python --no-python-downloads --color --native-tls --offline --allow-insecure-host --no-progress --directory --project --config-file --no-config -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_uv_help()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

## -o bashdefault and -o default are fallback
complete -o bashdefault -o default -F _uv uv
