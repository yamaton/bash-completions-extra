# Auto-generated with h2o

_rustup()
{
    local cur prev words cword
    _init_completion -s || return

    local cmd i subcommands
    local subcommands=" show update check default toolchain target component override run which doc man self set completions"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        show) _rustup_show
            return
            ;;

        update) _rustup_update
            return
            ;;

        check) _rustup_check
            return
            ;;

        default) _rustup_default
            return
            ;;

        toolchain) _rustup_toolchain
            return
            ;;

        target) _rustup_target
            return
            ;;

        component) _rustup_component
            return
            ;;

        override) _rustup_override
            return
            ;;

        run) _rustup_run
            return
            ;;

        which) _rustup_which
            return
            ;;

        doc) _rustup_doc
            return
            ;;

        man) _rustup_man
            return
            ;;

        self) _rustup_self
            return
            ;;

        set) _rustup_set
            return
            ;;

        completions) _rustup_completions
            return
            ;;

    esac

    local word_list=" show update check default toolchain target component override run which doc man self set completions -v --verbose -q --quiet -h --help -V --version"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_rustup_show()
{
    local cmd i subcommands
    local subcommands=" active-toolchain home profile keys"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        active-toolchain) _rustup_show_activetoolchain
            return
            ;;

        home) _rustup_show_home
            return
            ;;

        profile) _rustup_show_profile
            return
            ;;

        keys) _rustup_show_keys
            return
            ;;

    esac

    local word_list=" active-toolchain home profile keys -v --verbose -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_rustup_show_activetoolchain()
{
    local word_list="  -h --help -v --verbose"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_rustup_show_home()
{
    local word_list="  -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_rustup_show_profile()
{
    local word_list="  -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_rustup_show_keys()
{
    local word_list="  -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_rustup_update()
{
    local word_list="  --force --force-non-host -h --help --no-self-update"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_rustup_check()
{
    local word_list="  -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_rustup_default()
{
    local word_list="  -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_rustup_toolchain()
{
    local cmd i subcommands
    local subcommands=" list install uninstall link"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        list) _rustup_toolchain_list
            return
            ;;

        install) _rustup_toolchain_install
            return
            ;;

        uninstall) _rustup_toolchain_uninstall
            return
            ;;

        link) _rustup_toolchain_link
            return
            ;;

    esac

    local word_list=" list install uninstall link -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_rustup_toolchain_list()
{
    local word_list="  -h --help -v --verbose"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_rustup_toolchain_install()
{
    local word_list="  --allow-downgrade --force --force-non-host -h --help --no-self-update -c --component --profile -t --target"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_rustup_toolchain_uninstall()
{
    local word_list="  -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_rustup_toolchain_link()
{
    local word_list="  -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_rustup_target()
{
    local cmd i subcommands
    local subcommands=" list add remove"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        list) _rustup_target_list
            return
            ;;

        add) _rustup_target_add
            return
            ;;

        remove) _rustup_target_remove
            return
            ;;

    esac

    local word_list=" list add remove -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_rustup_target_list()
{
    local word_list="  -h --help --installed --toolchain"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_rustup_target_add()
{
    local word_list="  -h --help --toolchain"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_rustup_target_remove()
{
    local word_list="  -h --help --toolchain"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_rustup_component()
{
    local cmd i subcommands
    local subcommands=" list add remove"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        list) _rustup_component_list
            return
            ;;

        add) _rustup_component_add
            return
            ;;

        remove) _rustup_component_remove
            return
            ;;

    esac

    local word_list=" list add remove -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_rustup_component_list()
{
    local word_list="  -h --help --installed --toolchain"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_rustup_component_add()
{
    local word_list="  -h --help --target --toolchain"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_rustup_component_remove()
{
    local word_list="  -h --help --target --toolchain"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_rustup_override()
{
    local cmd i subcommands
    local subcommands=" list set unset"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        list) _rustup_override_list
            return
            ;;

        set) _rustup_override_set
            return
            ;;

        unset) _rustup_override_unset
            return
            ;;

    esac

    local word_list=" list set unset -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_rustup_override_list()
{
    local word_list="  -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_rustup_override_set()
{
    local word_list="  -h --help --path"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_rustup_override_unset()
{
    local word_list="  -h --help --nonexistent --path"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_rustup_run()
{
    local word_list="  -h --help --install"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_rustup_which()
{
    local word_list="  -h --help --toolchain"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_rustup_doc()
{
    local word_list="  --alloc --book --cargo --core --edition-guide --embedded-book -h --help --nomicon --path --proc_macro --reference --rust-by-example --rustc --rustdoc --std --test --unstable-book --toolchain"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_rustup_man()
{
    local word_list="  -h --help --toolchain"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_rustup_self()
{
    local cmd i subcommands
    local subcommands=" update uninstall upgrade-data"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        update) _rustup_self_update
            return
            ;;

        uninstall) _rustup_self_uninstall
            return
            ;;

        upgrade-data) _rustup_self_upgradedata
            return
            ;;

    esac

    local word_list=" update uninstall upgrade-data -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_rustup_self_update()
{
    local word_list="  -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_rustup_self_uninstall()
{
    local word_list="  -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_rustup_self_upgradedata()
{
    local word_list="  -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_rustup_set()
{
    local cmd i subcommands
    local subcommands=" auto-self-update default-host profile"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        auto-self-update) _rustup_set_autoselfupdate
            return
            ;;

        default-host) _rustup_set_defaulthost
            return
            ;;

        profile) _rustup_set_profile
            return
            ;;

    esac

    local word_list=" auto-self-update default-host profile -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_rustup_set_autoselfupdate()
{
    local word_list="  -h --help -V --version"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_rustup_set_defaulthost()
{
    local word_list="  -h --help -V --version"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_rustup_set_profile()
{
    local word_list="  -h --help -V --version"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_rustup_completions()
{
    local word_list="  -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

## -o bashdefault and -o default are fallback
complete -o bashdefault -o default -F _rustup rustup
