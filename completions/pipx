# Auto-generated with h2o

_pipx()
{
    local cur prev words cword
    _init_completion -s || return

    local cmd i subcommands
    local subcommands=" install inject upgrade upgrade-all uninstall uninstall-all reinstall reinstall-all list run runpip ensurepath environment completions"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        install) _pipx_install
            return
            ;;

        inject) _pipx_inject
            return
            ;;

        upgrade) _pipx_upgrade
            return
            ;;

        upgrade-all) _pipx_upgradeall
            return
            ;;

        uninstall) _pipx_uninstall
            return
            ;;

        uninstall-all) _pipx_uninstallall
            return
            ;;

        reinstall) _pipx_reinstall
            return
            ;;

        reinstall-all) _pipx_reinstallall
            return
            ;;

        list) _pipx_list
            return
            ;;

        run) _pipx_run
            return
            ;;

        runpip) _pipx_runpip
            return
            ;;

        ensurepath) _pipx_ensurepath
            return
            ;;

        environment) _pipx_environment
            return
            ;;

        completions) _pipx_completions
            return
            ;;

    esac

    local word_list=" install inject upgrade upgrade-all uninstall uninstall-all reinstall reinstall-all list run runpip ensurepath environment completions -h --help --version"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_pipx_install()
{
    local word_list="  -h --help --include-deps --verbose --force -f --suffix --python --system-site-packages --index-url -i --editable -e --pip-args"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_pipx_inject()
{
    local word_list="  -h --help --include-apps --include-deps --system-site-packages --index-url -i --editable -e --pip-args --force -f"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_pipx_upgrade()
{
    local word_list="  -h --help --include-injected --force -f --system-site-packages --index-url -i --editable -e --pip-args"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_pipx_upgradeall()
{
    local word_list="  -h --help --include-injected --skip --force -f"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_pipx_uninstall()
{
    local word_list="  -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_pipx_uninstallall()
{
    local word_list="  -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_pipx_reinstall()
{
    local word_list="  -h --help --python"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_pipx_reinstallall()
{
    local word_list="  -h --help --python --skip"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_pipx_list()
{
    local word_list="  -h --help --include-injected --json --short"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_pipx_run()
{
    local word_list="  -h --help --no-cache --pypackages --spec --verbose --python --system-site-packages --index-url -i --editable -e --pip-args"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_pipx_runpip()
{
    local word_list="  -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_pipx_ensurepath()
{
    local word_list="  -h --help --force -f"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_pipx_environment()
{
    local word_list="  -h --help --value -v"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_pipx_completions()
{
    local word_list="  -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

## -o bashdefault and -o default are fallback
complete -o bashdefault -o default -F _pipx pipx
