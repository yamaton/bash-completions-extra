# Auto-generated with h2o

_sqliteutils()
{
    local cur prev words cword
    _init_completion -s || return

    local cmd i subcommands
    local subcommands=" query add-column add-foreign-key add-foreign-keys add-geometry-column analyze analyze-tables bulk convert create-database create-index create-spatial-index create-table create-view disable-fts disable-wal drop-table drop-view dump duplicate enable-counts enable-fts enable-wal extract index-foreign-keys indexes insert insert-files install memory optimize populate-fts rebuild-fts reset-counts rows schema search tables transform triggers uninstall upsert vacuum views"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        query) _sqliteutils_query
            return
            ;;

        add-column) _sqliteutils_addcolumn
            return
            ;;

        add-foreign-key) _sqliteutils_addforeignkey
            return
            ;;

        add-foreign-keys) _sqliteutils_addforeignkeys
            return
            ;;

        add-geometry-column) _sqliteutils_addgeometrycolumn
            return
            ;;

        analyze) _sqliteutils_analyze
            return
            ;;

        analyze-tables) _sqliteutils_analyzetables
            return
            ;;

        bulk) _sqliteutils_bulk
            return
            ;;

        convert) _sqliteutils_convert
            return
            ;;

        create-database) _sqliteutils_createdatabase
            return
            ;;

        create-index) _sqliteutils_createindex
            return
            ;;

        create-spatial-index) _sqliteutils_createspatialindex
            return
            ;;

        create-table) _sqliteutils_createtable
            return
            ;;

        create-view) _sqliteutils_createview
            return
            ;;

        disable-fts) _sqliteutils_disablefts
            return
            ;;

        disable-wal) _sqliteutils_disablewal
            return
            ;;

        drop-table) _sqliteutils_droptable
            return
            ;;

        drop-view) _sqliteutils_dropview
            return
            ;;

        dump) _sqliteutils_dump
            return
            ;;

        duplicate) _sqliteutils_duplicate
            return
            ;;

        enable-counts) _sqliteutils_enablecounts
            return
            ;;

        enable-fts) _sqliteutils_enablefts
            return
            ;;

        enable-wal) _sqliteutils_enablewal
            return
            ;;

        extract) _sqliteutils_extract
            return
            ;;

        index-foreign-keys) _sqliteutils_indexforeignkeys
            return
            ;;

        indexes) _sqliteutils_indexes
            return
            ;;

        insert) _sqliteutils_insert
            return
            ;;

        insert-files) _sqliteutils_insertfiles
            return
            ;;

        install) _sqliteutils_install
            return
            ;;

        memory) _sqliteutils_memory
            return
            ;;

        optimize) _sqliteutils_optimize
            return
            ;;

        populate-fts) _sqliteutils_populatefts
            return
            ;;

        rebuild-fts) _sqliteutils_rebuildfts
            return
            ;;

        reset-counts) _sqliteutils_resetcounts
            return
            ;;

        rows) _sqliteutils_rows
            return
            ;;

        schema) _sqliteutils_schema
            return
            ;;

        search) _sqliteutils_search
            return
            ;;

        tables) _sqliteutils_tables
            return
            ;;

        transform) _sqliteutils_transform
            return
            ;;

        triggers) _sqliteutils_triggers
            return
            ;;

        uninstall) _sqliteutils_uninstall
            return
            ;;

        upsert) _sqliteutils_upsert
            return
            ;;

        vacuum) _sqliteutils_vacuum
            return
            ;;

        views) _sqliteutils_views
            return
            ;;

    esac

    local word_list=" query add-column add-foreign-key add-foreign-keys add-geometry-column analyze analyze-tables bulk convert create-database create-index create-spatial-index create-table create-view disable-fts disable-wal drop-table drop-view dump duplicate enable-counts enable-fts enable-wal extract index-foreign-keys indexes insert insert-files install memory optimize populate-fts rebuild-fts reset-counts rows schema search tables transform triggers uninstall upsert vacuum views --version -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_sqliteutils_query()
{
    local word_list="  --attach --nl --arrays --csv --tsv --no-headers -t --table --fmt --json-cols -r --raw --raw-lines -p --param --functions --load-extension -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_sqliteutils_addcolumn()
{
    local word_list="  --fk --fk-col --not-null-default --ignore --load-extension -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_sqliteutils_addforeignkey()
{
    local word_list="  --ignore --load-extension -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_sqliteutils_addforeignkeys()
{
    local word_list="  --load-extension -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_sqliteutils_addgeometrycolumn()
{
    local word_list="  -t --type --srid --dimensions --not-null --load-extension -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_sqliteutils_analyze()
{
    local word_list="  -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_sqliteutils_analyzetables()
{
    local word_list="  -c --column --save --common-limit --no-most --no-least --load-extension -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_sqliteutils_bulk()
{
    local word_list="  --batch-size --functions --flatten --nl -c --csv --tsv --lines --text --convert --import --delimiter --quotechar --sniff --no-headers --encoding --load-extension -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_sqliteutils_convert()
{
    local word_list="  --import --import --dry-run --multi --where -p --param --output --output-type --drop --no-skip-false -s --silent -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_sqliteutils_createdatabase()
{
    local word_list="  --enable-wal --init-spatialite --load-extension -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_sqliteutils_createindex()
{
    local word_list="  --name --unique --if-not-exists --ignore --analyze --load-extension -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_sqliteutils_createspatialindex()
{
    local word_list="  --load-extension -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_sqliteutils_createtable()
{
    local word_list="  --pk --not-null --default --fk --ignore --replace --transform --load-extension -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_sqliteutils_createview()
{
    local word_list="  --ignore --replace --load-extension -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_sqliteutils_disablefts()
{
    local word_list="  --load-extension -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_sqliteutils_disablewal()
{
    local word_list="  --load-extension -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_sqliteutils_droptable()
{
    local word_list="  --ignore --load-extension -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_sqliteutils_dropview()
{
    local word_list="  --ignore --load-extension -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_sqliteutils_dump()
{
    local word_list="  --load-extension -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_sqliteutils_duplicate()
{
    local word_list="  --ignore --load-extension -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_sqliteutils_enablecounts()
{
    local word_list="  --load-extension -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_sqliteutils_enablefts()
{
    local word_list="  --fts4 --fts5 --tokenize --create-triggers --replace --load-extension -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_sqliteutils_enablewal()
{
    local word_list="  --load-extension -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_sqliteutils_extract()
{
    local word_list="  --table --fk-column --rename --load-extension -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_sqliteutils_indexforeignkeys()
{
    local word_list="  --load-extension -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_sqliteutils_indexes()
{
    local word_list="  --aux --nl --arrays --csv --tsv --no-headers -t --table --fmt --json-cols --load-extension -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_sqliteutils_insert()
{
    local word_list="  --text --pk --flatten --nl -c --csv --tsv --lines --text --convert --import --delimiter --quotechar --sniff --no-headers --encoding --batch-size --alter --not-null --default -d --detect-types --analyze --load-extension --silent --ignore --replace --truncate -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_sqliteutils_insertfiles()
{
    local word_list="  -c --column --pk --alter --replace --upsert --name --text --encoding -s --silent --load-extension -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_sqliteutils_install()
{
    local word_list="  -U --upgrade -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_sqliteutils_memory()
{
    local word_list="  --functions --attach --flatten --nl --arrays --csv --tsv --no-headers -t --table --fmt --json-cols -r --raw --raw-lines -p --param --encoding -n --no-detect-types --schema --dump --save --analyze --load-extension -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_sqliteutils_optimize()
{
    local word_list="  --no-vacuum --load-extension -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_sqliteutils_populatefts()
{
    local word_list="  --load-extension -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_sqliteutils_rebuildfts()
{
    local word_list="  --load-extension -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_sqliteutils_resetcounts()
{
    local word_list="  --load-extension -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_sqliteutils_rows()
{
    local word_list="  -c --column --where -o --order -p --param --limit --offset --nl --arrays --csv --tsv --no-headers -t --table --fmt --json-cols --load-extension -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_sqliteutils_schema()
{
    local word_list="  --load-extension -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_sqliteutils_search()
{
    local word_list="  -o --order -c --column --limit --sql --quote --nl --arrays --csv --tsv --no-headers -t --table --fmt --json-cols --load-extension -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_sqliteutils_tables()
{
    local word_list="  --fts4 --fts5 --counts --nl --arrays --csv --tsv --no-headers -t --table --fmt --json-cols --columns --schema --load-extension -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_sqliteutils_transform()
{
    local word_list="  --type --drop --rename -o --column-order --not-null --not-null-false --pk --pk-none --default --default-none --drop-foreign-key --sql --load-extension -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_sqliteutils_triggers()
{
    local word_list="  --nl --arrays --csv --tsv --no-headers -t --table --fmt --json-cols --load-extension -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_sqliteutils_uninstall()
{
    local word_list="  -y --yes -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_sqliteutils_upsert()
{
    local word_list="  --pk --flatten --nl -c --csv --tsv --lines --text --convert --import --delimiter --quotechar --sniff --no-headers --encoding --batch-size --alter --not-null --default -d --detect-types --analyze --load-extension --silent -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_sqliteutils_vacuum()
{
    local word_list="  -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_sqliteutils_views()
{
    local word_list="  --counts --nl --arrays --csv --tsv --no-headers -t --table --fmt --json-cols --columns --schema --load-extension -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

## -o bashdefault and -o default are fallback
complete -o bashdefault -o default -F _sqliteutils sqlite-utils
