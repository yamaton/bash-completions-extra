# Auto-generated with h2o

_stack()
{
    local cur prev words cword
    _init_completion -s || return

    local cmd i subcommands
    local subcommands=" build install uninstall test bench haddock new templates init setup path ls unpack update upgrade upload sdist dot ghc hoogle exec run ghci repl runghc runhaskell script eval clean purge query list ide docker config hpc"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        build) _stack_build
            return
            ;;

        install) _stack_install
            return
            ;;

        uninstall) _stack_uninstall
            return
            ;;

        test) _stack_test
            return
            ;;

        bench) _stack_bench
            return
            ;;

        haddock) _stack_haddock
            return
            ;;

        new) _stack_new
            return
            ;;

        templates) _stack_templates
            return
            ;;

        init) _stack_init
            return
            ;;

        setup) _stack_setup
            return
            ;;

        path) _stack_path
            return
            ;;

        ls) _stack_ls
            return
            ;;

        unpack) _stack_unpack
            return
            ;;

        update) _stack_update
            return
            ;;

        upgrade) _stack_upgrade
            return
            ;;

        upload) _stack_upload
            return
            ;;

        sdist) _stack_sdist
            return
            ;;

        dot) _stack_dot
            return
            ;;

        ghc) _stack_ghc
            return
            ;;

        hoogle) _stack_hoogle
            return
            ;;

        exec) _stack_exec
            return
            ;;

        run) _stack_run
            return
            ;;

        ghci) _stack_ghci
            return
            ;;

        repl) _stack_repl
            return
            ;;

        runghc) _stack_runghc
            return
            ;;

        runhaskell) _stack_runhaskell
            return
            ;;

        script) _stack_script
            return
            ;;

        eval) _stack_eval
            return
            ;;

        clean) _stack_clean
            return
            ;;

        purge) _stack_purge
            return
            ;;

        query) _stack_query
            return
            ;;

        list) _stack_list
            return
            ;;

        ide) _stack_ide
            return
            ;;

        docker) _stack_docker
            return
            ;;

        config) _stack_config
            return
            ;;

        hpc) _stack_hpc
            return
            ;;

    esac

    local word_list=" build install uninstall test bench haddock new templates init setup path ls unpack update upgrade upload sdist dot ghc hoogle exec run ghci repl runghc runhaskell script eval clean purge query list ide docker config hpc --help --version --numeric-version --hpack-numeric-version --docker --nix --verbosity -v --verbose --silent --time-in-log --no-time-in-log --rsl-in-log --no-rsl-in-log --stack-root --work-dir --system-ghc --no-system-ghc --install-ghc --no-install-ghc --arch --ghc-variant --ghc-build -j --jobs --extra-include-dirs --extra-lib-dirs --custom-preprocessor-extensions --with-gcc --with-hpack --skip-ghc-check --no-skip-ghc-check --skip-msys --no-skip-msys --local-bin-path --setup-info-yaml --modify-code-page --no-modify-code-page --allow-different-user --no-allow-different-user --dump-logs --no-dump-logs --color --colour --snapshot-location-base --script-no-run-compile --no-script-no-run-compile --resolver --compiler --terminal --no-terminal --stack-colors --stack-colours --terminal-width --stack-yaml --lock-file --full"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_stack_build()
{
    local word_list="  --dry-run --pedantic --fast --ghc-options --flag --dependencies-only --only-snapshot --only-dependencies --only-locals --file-watch --file-watch-poll --watch-all --exec --only-configure --trace --profile --no-strip --library-profiling --no-library-profiling --executable-profiling --no-executable-profiling --library-stripping --no-library-stripping --executable-stripping --no-executable-stripping --haddock --no-haddock --haddock-arguments --open --no-open --haddock-deps --no-haddock-deps --haddock-internal --no-haddock-internal --haddock-hyperlink-source --no-haddock-hyperlink-source --copy-bins --no-copy-bins --copy-compiler-tool --no-copy-compiler-tool --prefetch --no-prefetch --keep-going --no-keep-going --keep-tmp-files --no-keep-tmp-files --force-dirty --no-force-dirty --test --no-test --rerun-tests --no-rerun-tests --ta --test-arguments --coverage --no-run-tests --test-suite-timeout --bench --no-bench --ba --benchmark-arguments --no-run-benchmarks --reconfigure --no-reconfigure --cabal-verbosity --cabal-verbose --no-cabal-verbose --split-objs --no-split-objs --skip --interleaved-output --no-interleaved-output --ddump-dir --setup-info-yaml --snapshot-location-base --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_stack_install()
{
    local word_list="  --dry-run --pedantic --fast --ghc-options --flag --dependencies-only --only-snapshot --only-dependencies --only-locals --file-watch --file-watch-poll --watch-all --exec --only-configure --trace --profile --no-strip --library-profiling --no-library-profiling --executable-profiling --no-executable-profiling --library-stripping --no-library-stripping --executable-stripping --no-executable-stripping --haddock --no-haddock --haddock-arguments --open --no-open --haddock-deps --no-haddock-deps --haddock-internal --no-haddock-internal --haddock-hyperlink-source --no-haddock-hyperlink-source --copy-bins --no-copy-bins --copy-compiler-tool --no-copy-compiler-tool --prefetch --no-prefetch --keep-going --no-keep-going --keep-tmp-files --no-keep-tmp-files --force-dirty --no-force-dirty --test --no-test --rerun-tests --no-rerun-tests --ta --test-arguments --coverage --no-run-tests --test-suite-timeout --bench --no-bench --ba --benchmark-arguments --no-run-benchmarks --reconfigure --no-reconfigure --cabal-verbosity --cabal-verbose --no-cabal-verbose --split-objs --no-split-objs --skip --interleaved-output --no-interleaved-output --ddump-dir --setup-info-yaml --snapshot-location-base --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_stack_uninstall()
{
    local word_list="  --setup-info-yaml --snapshot-location-base --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_stack_test()
{
    local word_list="  --dry-run --pedantic --fast --ghc-options --flag --dependencies-only --only-snapshot --only-dependencies --only-locals --file-watch --file-watch-poll --watch-all --exec --only-configure --trace --profile --no-strip --library-profiling --no-library-profiling --executable-profiling --no-executable-profiling --library-stripping --no-library-stripping --executable-stripping --no-executable-stripping --haddock --no-haddock --haddock-arguments --open --no-open --haddock-deps --no-haddock-deps --haddock-internal --no-haddock-internal --haddock-hyperlink-source --no-haddock-hyperlink-source --copy-bins --no-copy-bins --copy-compiler-tool --no-copy-compiler-tool --prefetch --no-prefetch --keep-going --no-keep-going --keep-tmp-files --no-keep-tmp-files --force-dirty --no-force-dirty --test --no-test --rerun-tests --no-rerun-tests --ta --test-arguments --coverage --no-run-tests --test-suite-timeout --bench --no-bench --ba --benchmark-arguments --no-run-benchmarks --reconfigure --no-reconfigure --cabal-verbosity --cabal-verbose --no-cabal-verbose --split-objs --no-split-objs --skip --interleaved-output --no-interleaved-output --ddump-dir --setup-info-yaml --snapshot-location-base --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_stack_bench()
{
    local word_list="  --dry-run --pedantic --fast --ghc-options --flag --dependencies-only --only-snapshot --only-dependencies --only-locals --file-watch --file-watch-poll --watch-all --exec --only-configure --trace --profile --no-strip --library-profiling --no-library-profiling --executable-profiling --no-executable-profiling --library-stripping --no-library-stripping --executable-stripping --no-executable-stripping --haddock --no-haddock --haddock-arguments --open --no-open --haddock-deps --no-haddock-deps --haddock-internal --no-haddock-internal --haddock-hyperlink-source --no-haddock-hyperlink-source --copy-bins --no-copy-bins --copy-compiler-tool --no-copy-compiler-tool --prefetch --no-prefetch --keep-going --no-keep-going --keep-tmp-files --no-keep-tmp-files --force-dirty --no-force-dirty --test --no-test --rerun-tests --no-rerun-tests --ta --test-arguments --coverage --no-run-tests --test-suite-timeout --bench --no-bench --ba --benchmark-arguments --no-run-benchmarks --reconfigure --no-reconfigure --cabal-verbosity --cabal-verbose --no-cabal-verbose --split-objs --no-split-objs --skip --interleaved-output --no-interleaved-output --ddump-dir --setup-info-yaml --snapshot-location-base --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_stack_haddock()
{
    local word_list="  --dry-run --pedantic --fast --ghc-options --flag --dependencies-only --only-snapshot --only-dependencies --only-locals --file-watch --file-watch-poll --watch-all --exec --only-configure --trace --profile --no-strip --library-profiling --no-library-profiling --executable-profiling --no-executable-profiling --library-stripping --no-library-stripping --executable-stripping --no-executable-stripping --haddock --no-haddock --haddock-arguments --open --no-open --haddock-deps --no-haddock-deps --haddock-internal --no-haddock-internal --haddock-hyperlink-source --no-haddock-hyperlink-source --copy-bins --no-copy-bins --copy-compiler-tool --no-copy-compiler-tool --prefetch --no-prefetch --keep-going --no-keep-going --keep-tmp-files --no-keep-tmp-files --force-dirty --no-force-dirty --test --no-test --rerun-tests --no-rerun-tests --ta --test-arguments --coverage --no-run-tests --test-suite-timeout --bench --no-bench --ba --benchmark-arguments --no-run-benchmarks --reconfigure --no-reconfigure --cabal-verbosity --cabal-verbose --no-cabal-verbose --split-objs --no-split-objs --skip --interleaved-output --no-interleaved-output --ddump-dir --setup-info-yaml --snapshot-location-base --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_stack_new()
{
    local word_list="  --bare -p --param --omit-packages --force --ignore-subdirs --setup-info-yaml --snapshot-location-base --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_stack_templates()
{
    local word_list="  --setup-info-yaml --snapshot-location-base --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_stack_init()
{
    local word_list="  --omit-packages --force --ignore-subdirs --setup-info-yaml --snapshot-location-base --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_stack_setup()
{
    local word_list="  --reinstall --no-reinstall --ghc-bindist --ghcjs-boot-options --ghcjs-boot-clean --no-ghcjs-boot-clean --setup-info-yaml --snapshot-location-base --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_stack_path()
{
    local word_list="  --stack-root --project-root --config-location --bin-path --programs --compiler-exe --compiler-bin --compiler-tools-bin --local-bin --extra-include-dirs --extra-library-dirs --snapshot-pkg-db --local-pkg-db --global-pkg-db --ghc-package-path --snapshot-install-root --local-install-root --snapshot-doc-root --local-doc-root --local-hoogle-root --dist-dir --local-hpc-root --local-bin-path --ghc-paths --global-stack-root --setup-info-yaml --snapshot-location-base --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_stack_ls()
{
    local cmd i subcommands
    local subcommands=" snapshots dependencies stack-colors stack-colours tools"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        snapshots) _stack_ls_snapshots
            return
            ;;

        dependencies) _stack_ls_dependencies
            return
            ;;

        stack-colors) _stack_ls_stackcolors
            return
            ;;

        stack-colours) _stack_ls_stackcolours
            return
            ;;

        tools) _stack_ls_tools
            return
            ;;

    esac

    local word_list=" snapshots dependencies stack-colors stack-colours tools --setup-info-yaml --snapshot-location-base --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_stack_ls_snapshots()
{
    local cmd i subcommands
    local subcommands=" remote local"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        remote) _stack_ls_snapshots_remote
            return
            ;;

        local) _stack_ls_snapshots_local
            return
            ;;

    esac

    local word_list=" remote local -l --lts -n --nightly -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_stack_ls_snapshots_remote()
{
    local word_list="  -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_stack_ls_snapshots_local()
{
    local word_list="  -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_stack_ls_dependencies()
{
    local word_list="  --separator --license --no-license --external --no-external --include-base --no-include-base --depth --prune --flag --test --bench --global-hints -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_stack_ls_stackcolors()
{
    local word_list="  --basic --no-basic --sgr --no-sgr --example --no-example -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_stack_ls_stackcolours()
{
    local word_list="  --basic --no-basic --sgr --no-sgr --example --no-example -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_stack_ls_tools()
{
    local word_list="  --filter -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_stack_unpack()
{
    local word_list="  --to --setup-info-yaml --snapshot-location-base --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_stack_update()
{
    local word_list="  --setup-info-yaml --snapshot-location-base --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_stack_upgrade()
{
    local word_list="  --source-only --binary-platform --force-download --binary-version --github-org --github-repo --binary-only --git --git-repo --git-branch --setup-info-yaml --snapshot-location-base --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_stack_upload()
{
    local word_list="  --pvp-bounds --ignore-check --test-tarball --no-test-tarball --tar-dir --candidate --setup-info-yaml --snapshot-location-base --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_stack_sdist()
{
    local word_list="  --pvp-bounds --ignore-check --test-tarball --no-test-tarball --tar-dir --setup-info-yaml --snapshot-location-base --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_stack_dot()
{
    local word_list="  --external --no-external --include-base --no-include-base --depth --prune --flag --test --bench --global-hints --setup-info-yaml --snapshot-location-base --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_stack_ghc()
{
    local word_list="  --ghc-package-path --no-ghc-package-path --stack-exe --no-stack-exe --package --rts-options --cwd --setup-info-yaml --snapshot-location-base --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_stack_hoogle()
{
    local word_list="  --setup --no-setup --rebuild --server --setup-info-yaml --snapshot-location-base --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_stack_exec()
{
    local word_list="  --ghc-package-path --no-ghc-package-path --stack-exe --no-stack-exe --package --rts-options --cwd --setup-info-yaml --snapshot-location-base --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_stack_run()
{
    local word_list="  --ghc-package-path --no-ghc-package-path --stack-exe --no-stack-exe --package --rts-options --cwd --setup-info-yaml --snapshot-location-base --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_stack_ghci()
{
    local word_list="  --pedantic --ghci-options --ghc-options --flag --with-ghc --load --no-load --package --main-is --load-local-deps --package-hiding --no-package-hiding --only-main --trace --profile --no-strip --test --no-test --bench --no-bench --setup-info-yaml --snapshot-location-base --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_stack_repl()
{
    local word_list="  --pedantic --ghci-options --ghc-options --flag --with-ghc --load --no-load --package --main-is --load-local-deps --package-hiding --no-package-hiding --only-main --trace --profile --no-strip --test --no-test --bench --no-bench --setup-info-yaml --snapshot-location-base --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_stack_runghc()
{
    local word_list="  --ghc-package-path --no-ghc-package-path --stack-exe --no-stack-exe --package --rts-options --cwd --setup-info-yaml --snapshot-location-base --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_stack_runhaskell()
{
    local word_list="  --ghc-package-path --no-ghc-package-path --stack-exe --no-stack-exe --package --rts-options --cwd --setup-info-yaml --snapshot-location-base --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_stack_script()
{
    local word_list="  --package --compile --optimize --ghc-options --extra-dep --no-run --setup-info-yaml --snapshot-location-base --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_stack_eval()
{
    local word_list="  --ghc-package-path --no-ghc-package-path --stack-exe --no-stack-exe --package --rts-options --cwd --setup-info-yaml --snapshot-location-base --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_stack_clean()
{
    local word_list="  --full --setup-info-yaml --snapshot-location-base --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_stack_purge()
{
    local word_list="  --setup-info-yaml --snapshot-location-base --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_stack_query()
{
    local word_list="  --setup-info-yaml --snapshot-location-base --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_stack_list()
{
    local word_list="  --setup-info-yaml --snapshot-location-base --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_stack_ide()
{
    local cmd i subcommands
    local subcommands=" packages targets"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        packages) _stack_ide_packages
            return
            ;;

        targets) _stack_ide_targets
            return
            ;;

    esac

    local word_list=" packages targets --setup-info-yaml --snapshot-location-base --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_stack_ide_packages()
{
    local word_list="  --stdout --cabal-files --setup-info-yaml --snapshot-location-base --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_stack_ide_targets()
{
    local word_list="  --stdout --setup-info-yaml --snapshot-location-base --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_stack_docker()
{
    local cmd i subcommands
    local subcommands=" pull reset"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        pull) _stack_docker_pull
            return
            ;;

        reset) _stack_docker_reset
            return
            ;;

    esac

    local word_list=" pull reset --setup-info-yaml --snapshot-location-base --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_stack_docker_pull()
{
    local word_list="  --setup-info-yaml --snapshot-location-base --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_stack_docker_reset()
{
    local word_list="  --keep-home --setup-info-yaml --snapshot-location-base --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_stack_config()
{
    local cmd i subcommands
    local subcommands=" set env"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        set) _stack_config_set
            return
            ;;

        env) _stack_config_env
            return
            ;;

    esac

    local word_list=" set env --setup-info-yaml --snapshot-location-base --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_stack_config_set()
{
    local cmd i subcommands
    local subcommands=" resolver system-ghc install-ghc"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        resolver) _stack_config_set_resolver
            return
            ;;

        system-ghc) _stack_config_set_systemghc
            return
            ;;

        install-ghc) _stack_config_set_installghc
            return
            ;;

    esac

    local word_list=" resolver system-ghc install-ghc --setup-info-yaml --snapshot-location-base --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_stack_config_set_resolver()
{
    local word_list="  -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_stack_config_set_systemghc()
{
    local word_list="  --global -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_stack_config_set_installghc()
{
    local word_list="  --global -h --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_stack_config_env()
{
    local word_list="  --locals --no-locals --ghc-package-path --no-ghc-package-path --stack-exe --no-stack-exe --locale-utf8 --no-locale-utf8 --keep-ghc-rts --no-keep-ghc-rts --setup-info-yaml --snapshot-location-base --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_stack_hpc()
{
    local cmd i subcommands
    local subcommands=" report"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        report) _stack_hpc_report
            return
            ;;

    esac

    local word_list=" report --setup-info-yaml --snapshot-location-base --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_stack_hpc_report()
{
    local word_list="  --all --destdir --open --setup-info-yaml --snapshot-location-base --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

## -o bashdefault and -o default are fallback
complete -o bashdefault -o default -F _stack stack
