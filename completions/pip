# Auto-generated with h2o

_pip()
{
    local cur prev words cword
    _init_completion -s || return

    local cmd i subcommands
    local subcommands=" install download uninstall freeze inspect list show check config search cache index wheel hash completion debug help"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        install) _pip_install
            return
            ;;

        download) _pip_download
            return
            ;;

        uninstall) _pip_uninstall
            return
            ;;

        freeze) _pip_freeze
            return
            ;;

        inspect) _pip_inspect
            return
            ;;

        list) _pip_list
            return
            ;;

        show) _pip_show
            return
            ;;

        check) _pip_check
            return
            ;;

        config) _pip_config
            return
            ;;

        search) _pip_search
            return
            ;;

        cache) _pip_cache
            return
            ;;

        index) _pip_index
            return
            ;;

        wheel) _pip_wheel
            return
            ;;

        hash) _pip_hash
            return
            ;;

        completion) _pip_completion
            return
            ;;

        debug) _pip_debug
            return
            ;;

        help) _pip_help
            return
            ;;

    esac

    local word_list=" install download uninstall freeze inspect list show check config search cache index wheel hash completion debug help -h --help --debug --isolated --require-virtualenv --python -v --verbose -V --version -q --quiet --log --no-input --proxy --retries --timeout --exists-action --trusted-host --cert --client-cert --cache-dir --no-cache-dir --disable-pip-version-check --no-color --no-python-version-warning --use-feature --use-deprecated"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_pip_install()
{
    local word_list="  -r --requirement -c --constraint --no-deps --pre -e --editable --dry-run -t --target --platform --python-version --implementation --abi --user --root --prefix --src -U --upgrade --upgrade-strategy --force-reinstall -I --ignore-installed --ignore-requires-python --no-build-isolation --use-pep517 --check-build-dependencies --config-settings --install-option --global-option --compile --no-compile --no-warn-script-location --no-warn-conflicts --no-binary --only-binary --prefer-binary --require-hashes --progress-bar --root-user-action --report --no-clean -i --index-url --extra-index-url --no-index -f --find-links -h --help --debug --isolated --require-virtualenv --python -v --verbose -V --version -q --quiet --log --no-input --proxy --retries --timeout --exists-action --trusted-host --cert --client-cert --cache-dir --no-cache-dir --disable-pip-version-check --no-color --no-python-version-warning --use-feature --use-deprecated"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_pip_download()
{
    local word_list="  -c --constraint -r --requirement --no-deps --global-option --no-binary --only-binary --prefer-binary --src --pre --require-hashes --progress-bar --no-build-isolation --use-pep517 --check-build-dependencies --ignore-requires-python -d --dest --platform --python-version --implementation --abi --no-clean -i --index-url --extra-index-url --no-index -f --find-links -h --help --debug --isolated --require-virtualenv --python -v --verbose -V --version -q --quiet --log --no-input --proxy --retries --timeout --exists-action --trusted-host --cert --client-cert --cache-dir --no-cache-dir --disable-pip-version-check --no-color --no-python-version-warning --use-feature --use-deprecated"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_pip_uninstall()
{
    local word_list="  - - -r --requirement -y --yes --root-user-action -h --help --debug --isolated --require-virtualenv --python -v --verbose -V --version -q --quiet --log --no-input --proxy --retries --timeout --exists-action --trusted-host --cert --client-cert --cache-dir --no-cache-dir --disable-pip-version-check --no-color --no-python-version-warning --use-feature --use-deprecated"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_pip_freeze()
{
    local cmd i subcommands
    local subcommands=" packages"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        packages) _pip_freeze_packages
            return
            ;;

    esac

    local word_list=" packages -r --requirement -l --local --user --path --all --exclude-editable --exclude -h --help --debug --isolated --require-virtualenv --python -v --verbose -V --version -q --quiet --log --no-input --proxy --retries --timeout --exists-action --trusted-host --cert --client-cert --cache-dir --no-cache-dir --disable-pip-version-check --no-color --no-python-version-warning --use-feature --use-deprecated"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_pip_freeze_packages()
{
    local word_list="  -r --requirement -l --local --user --path --all --exclude-editable --exclude -h --help --debug --isolated --require-virtualenv --python -v --verbose -V --version -q --quiet --log --no-input --proxy --retries --timeout --exists-action --trusted-host --cert --client-cert --cache-dir --no-cache-dir --disable-pip-version-check --no-color --no-python-version-warning --use-feature --use-deprecated"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_pip_inspect()
{
    local word_list="  --local --user --path -h --help --debug --isolated --require-virtualenv --python -v --verbose -V --version -q --quiet --log --no-input --proxy --retries --timeout --exists-action --trusted-host --cert --client-cert --cache-dir --no-cache-dir --disable-pip-version-check --no-color --no-python-version-warning --use-feature --use-deprecated"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_pip_list()
{
    local word_list="  -o --outdated -u --uptodate -e --editable -l --local --user --path --pre --format --not-required --exclude-editable --include-editable --exclude -i --index-url --extra-index-url --no-index -f --find-links -h --help --debug --isolated --require-virtualenv --python -v --verbose -V --version -q --quiet --log --no-input --proxy --retries --timeout --exists-action --trusted-host --cert --client-cert --cache-dir --no-cache-dir --disable-pip-version-check --no-color --no-python-version-warning --use-feature --use-deprecated"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_pip_show()
{
    local word_list="  -f --files -h --help --debug --isolated --require-virtualenv --python -v --verbose -V --version -q --quiet --log --no-input --proxy --retries --timeout --exists-action --trusted-host --cert --client-cert --cache-dir --no-cache-dir --disable-pip-version-check --no-color --no-python-version-warning --use-feature --use-deprecated"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_pip_check()
{
    local word_list="  -h --help --debug --isolated --require-virtualenv --python -v --verbose -V --version -q --quiet --log --no-input --proxy --retries --timeout --exists-action --trusted-host --cert --client-cert --cache-dir --no-cache-dir --disable-pip-version-check --no-color --no-python-version-warning --use-feature --use-deprecated"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_pip_config()
{
    local word_list="  --editor --global --user --site -h --help --debug --isolated --require-virtualenv --python -v --verbose -V --version -q --quiet --log --no-input --proxy --retries --timeout --exists-action --trusted-host --cert --client-cert --cache-dir --no-cache-dir --disable-pip-version-check --no-color --no-python-version-warning --use-feature --use-deprecated"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_pip_search()
{
    local word_list="  -i --index -h --help --debug --isolated --require-virtualenv --python -v --verbose -V --version -q --quiet --log --no-input --proxy --retries --timeout --exists-action --trusted-host --cert --client-cert --cache-dir --no-cache-dir --disable-pip-version-check --no-color --no-python-version-warning --use-feature --use-deprecated"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_pip_cache()
{
    local word_list="  --format -h --help --debug --isolated --require-virtualenv --python -v --verbose -V --version -q --quiet --log --no-input --proxy --retries --timeout --exists-action --trusted-host --cert --client-cert --cache-dir --no-cache-dir --disable-pip-version-check --no-color --no-python-version-warning --use-feature --use-deprecated"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_pip_index()
{
    local word_list="  --platform --python-version --implementation --abi --ignore-requires-python --pre --no-binary --only-binary -i --index-url --extra-index-url --no-index -f --find-links -h --help --debug --isolated --require-virtualenv --python -v --verbose -V --version -q --quiet --log --no-input --proxy --retries --timeout --exists-action --trusted-host --cert --client-cert --cache-dir --no-cache-dir --disable-pip-version-check --no-color --no-python-version-warning --use-feature --use-deprecated"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_pip_wheel()
{
    local word_list="  -w --wheel-dir --no-binary --only-binary --prefer-binary --no-build-isolation --use-pep517 --check-build-dependencies -c --constraint -e --editable -r --requirement --src --ignore-requires-python --no-deps --progress-bar --no-verify --config-settings --build-option --global-option --pre --require-hashes --no-clean -i --index-url --extra-index-url --no-index -f --find-links -h --help --debug --isolated --require-virtualenv --python -v --verbose -V --version -q --quiet --log --no-input --proxy --retries --timeout --exists-action --trusted-host --cert --client-cert --cache-dir --no-cache-dir --disable-pip-version-check --no-color --no-python-version-warning --use-feature --use-deprecated"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_pip_hash()
{
    local word_list="  -a --algorithm -h --help --debug --isolated --require-virtualenv --python -v --verbose -V --version -q --quiet --log --no-input --proxy --retries --timeout --exists-action --trusted-host --cert --client-cert --cache-dir --no-cache-dir --disable-pip-version-check --no-color --no-python-version-warning --use-feature --use-deprecated"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_pip_completion()
{
    local word_list="  -b --bash -z --zsh -f --fish -p --powershell -h --help --debug --isolated --require-virtualenv --python -v --verbose -V --version -q --quiet --log --no-input --proxy --retries --timeout --exists-action --trusted-host --cert --client-cert --cache-dir --no-cache-dir --disable-pip-version-check --no-color --no-python-version-warning --use-feature --use-deprecated"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_pip_debug()
{
    local word_list="  --platform --python-version --implementation --abi -h --help --debug --isolated --require-virtualenv --python -v --verbose -V --version -q --quiet --log --no-input --proxy --retries --timeout --exists-action --trusted-host --cert --client-cert --cache-dir --no-cache-dir --disable-pip-version-check --no-color --no-python-version-warning --use-feature --use-deprecated"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_pip_help()
{
    local word_list="  -h --help --debug --isolated --require-virtualenv --python -v --verbose -V --version -q --quiet --log --no-input --proxy --retries --timeout --exists-action --trusted-host --cert --client-cert --cache-dir --no-cache-dir --disable-pip-version-check --no-color --no-python-version-warning --use-feature --use-deprecated"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

## -o bashdefault and -o default are fallback
complete -o bashdefault -o default -F _pip pip
