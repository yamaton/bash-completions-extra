# Auto-generated with h2o

_bun()
{
    local cur prev words cword
    _init_completion -s || return

    local cmd i subcommands
    local subcommands=" run test x repl init create install add remove update link unlink pm build upgrade"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        run) _bun_run
            return
            ;;

        test) _bun_test
            return
            ;;

        x) _bun_x
            return
            ;;

        repl) _bun_repl
            return
            ;;

        init) _bun_init
            return
            ;;

        create) _bun_create
            return
            ;;

        install) _bun_install
            return
            ;;

        add) _bun_add
            return
            ;;

        remove) _bun_remove
            return
            ;;

        update) _bun_update
            return
            ;;

        link) _bun_link
            return
            ;;

        unlink) _bun_unlink
            return
            ;;

        pm) _bun_pm
            return
            ;;

        build) _bun_build
            return
            ;;

        upgrade) _bun_upgrade
            return
            ;;

    esac

    local word_list=" run test x repl init create install add remove update link unlink pm build upgrade -h --help -b --bun --cwd -c --config --extension-order --jsx-factory --jsx-fragment --jsx-import-source --jsx-runtime -r --preload --main-fields --no-summary -v --version --revision --tsconfig-override -d --define -e --external -l --loader -u --origin -p --port --smol --minify --minify-syntax --minify-whitespace --minify-identifiers --no-macros --target --inspect --inspect-wait --inspect-brk --hot --watch --no-install -i --install --prefer-offline --prefer-latest --silent --dump-environment-variables --dump-limits"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_bun_run()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_bun_test()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_bun_x()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_bun_repl()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_bun_init()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_bun_create()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_bun_install()
{
    local word_list="  -c --config -y --yarn -p --production --no-save --save --dry-run --lockfile --frozen-lockfile -f --force --cache-dir --no-cache --silent --verbose --no-progress --no-summary --no-verify --ignore-scripts -g --global --cwd --backend --link-native-bins --help -d --dev -D --development --optional --exact"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_bun_add()
{
    local word_list="  -c --config -y --yarn -p --production --no-save --save --dry-run --lockfile --frozen-lockfile -f --force --cache-dir --no-cache --silent --verbose --no-progress --no-summary --no-verify --ignore-scripts -g --global --cwd --backend --link-native-bins --help -d --dev -D --development --optional --exact"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_bun_remove()
{
    local word_list="  -c --config -y --yarn -p --production --no-save --save --dry-run --lockfile --frozen-lockfile -f --force --cache-dir --no-cache --silent --verbose --no-progress --no-summary --no-verify --ignore-scripts -g --global --cwd --backend --link-native-bins --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_bun_update()
{
    local word_list="  -c --config -y --yarn -p --production --no-save --save --dry-run --lockfile --frozen-lockfile -f --force --cache-dir --no-cache --silent --verbose --no-progress --no-summary --no-verify --ignore-scripts -g --global --cwd --backend --link-native-bins --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_bun_link()
{
    local word_list="  -c --config -y --yarn -p --production --no-save --save --dry-run --lockfile --frozen-lockfile -f --force --cache-dir --no-cache --silent --verbose --no-progress --no-summary --no-verify --ignore-scripts -g --global --cwd --backend --link-native-bins --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_bun_unlink()
{
    local word_list="  -c --config -y --yarn -p --production --no-save --save --dry-run --lockfile --frozen-lockfile -f --force --cache-dir --no-cache --silent --verbose --no-progress --no-summary --no-verify --ignore-scripts -g --global --cwd --backend --link-native-bins --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_bun_pm()
{
    local word_list="  -c --config -y --yarn -p --production --no-save --save --dry-run --lockfile --frozen-lockfile -f --force --cache-dir --no-cache --silent --verbose --no-progress --no-summary --no-verify --ignore-scripts -g --global --cwd --backend --link-native-bins --help"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_bun_build()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_bun_upgrade()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

## -o bashdefault and -o default are fallback
complete -o bashdefault -o default -F _bun bun
