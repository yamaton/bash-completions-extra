# Auto-generated with h2o

_bundle()
{
    local cur prev words cword
    _init_completion -s || return

    local cmd i subcommands
    local subcommands=" install update package exec config add binstubs check show outdated console open lock viz init gem platform clean doctor remove"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        install) _bundle_install
            return
            ;;

        update) _bundle_update
            return
            ;;

        package) _bundle_package
            return
            ;;

        exec) _bundle_exec
            return
            ;;

        config) _bundle_config
            return
            ;;

        add) _bundle_add
            return
            ;;

        binstubs) _bundle_binstubs
            return
            ;;

        check) _bundle_check
            return
            ;;

        show) _bundle_show
            return
            ;;

        outdated) _bundle_outdated
            return
            ;;

        console) _bundle_console
            return
            ;;

        open) _bundle_open
            return
            ;;

        lock) _bundle_lock
            return
            ;;

        viz) _bundle_viz
            return
            ;;

        init) _bundle_init
            return
            ;;

        gem) _bundle_gem
            return
            ;;

        platform) _bundle_platform
            return
            ;;

        clean) _bundle_clean
            return
            ;;

        doctor) _bundle_doctor
            return
            ;;

        remove) _bundle_remove
            return
            ;;

    esac

    local word_list=" install update package exec config add binstubs check show outdated console open lock viz init gem platform clean doctor remove --no-color --retry -r --verbose -V"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_bundle_install()
{
    local word_list="  --binstubs --clean --deployment --redownload --frozen --full-index --gemfile --jobs -j --local --no-cache --no-prune --path --quiet --retry --shebang --standalone --system --trust-policy --with --without"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_bundle_update()
{
    local word_list="  --all --group -g --source --local --ruby --bundler --full-index --jobs -j --retry --quiet --redownload --patch --minor --major --strict --conservative"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_bundle_package()
{
    local word_list="  -r --retry"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_bundle_exec()
{
    local word_list="  --keep-file-descriptors"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_bundle_config()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_bundle_add()
{
    local word_list="  --version -v --group -g --git --github --branch --ref --skip-install --optimistic --strict"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_bundle_binstubs()
{
    local word_list="  --force --path --standalone --shebang --all"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_bundle_check()
{
    local word_list="  --dry-run --gemfile --path"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_bundle_show()
{
    local word_list="  --paths"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_bundle_outdated()
{
    local word_list="  --local --pre --source --strict --parseable --porcelain --group --groups --minor --major --patch --filter-major --filter-minor --filter-patch --only-explicit"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_bundle_console()
{
    local word_list="  -r --retry"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_bundle_open()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_bundle_lock()
{
    local word_list="  --update --local --print --lockfile --full-index --add-platform --remove-platform --patch --minor --major --strict --conservative"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_bundle_viz()
{
    local word_list="  --file -f --format -F --requirements -R --version -v --without -W"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_bundle_init()
{
    local word_list="  --gemspec"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_bundle_gem()
{
    local word_list="  --exe -b --bin --no-exe --coc --no-coc --ext --no-ext --mit --no-mit -t --test --ci --linter -e --edit"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_bundle_platform()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_bundle_clean()
{
    local word_list="  --dry-run --force"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_bundle_doctor()
{
    local word_list="  --quiet --gemfile"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_bundle_remove()
{
    local word_list="  --install"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

## -o bashdefault and -o default are fallback
complete -o bashdefault -o default -F _bundle bundle
