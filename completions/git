# Auto-generated with h2o

_git()
{
    local cur prev words cword
    _init_completion -s || return

    local cmd i subcommands
    local subcommands=" add am archive bisect branch bundle checkout cherry-pick citool clean clone commit describe diff fetch format-patch gc grep init log maintenance merge mv notes pull push range-diff rebase reset restore revert rm shortlog show sparse-checkout stash status submodule switch tag worktree config fast-export fast-import filter-branch mergetool pack-refs prune reflog remote repack replace annotate blame bugreport count-objects difftool fsck gitweb help instaweb merge-tree rerere show-branch verify-commit verify-tag whatchanged imap-send p4 quiltimport request-pull svn apply checkout-index commit-graph commit-tree hash-object index-pack merge-file merge-index mktag mktree multi-pack-index pack-objects prune-packed read-tree symbolic-ref unpack-objects update-index update-ref write-tree cat-file cherry diff-files diff-index diff-tree for-each-ref for-each-repo get-tar-commit-id ls-files ls-remote ls-tree merge-base name-rev pack-redundant rev-list rev-parse show-index show-ref unpack-file var verify-pack daemon fetch-pack http-backend send-pack update-server-info check-attr check-ignore check-mailmap check-ref-format column credential credential-cache credential-store fmt-merge-msg hook interpret-trailers mailinfo mailsplit merge-one-file patch-id stripspace"

    for (( i=1; i < cword; i++ )); do
        if [[ " ${subcommands[*]} " == *" ${words[i]} "* ]]; then
            cmd=${words[i]}
            break
        fi
    done

    case "$cmd" in
        add) _git_add
            return
            ;;

        am) _git_am
            return
            ;;

        archive) _git_archive
            return
            ;;

        bisect) _git_bisect
            return
            ;;

        branch) _git_branch
            return
            ;;

        bundle) _git_bundle
            return
            ;;

        checkout) _git_checkout
            return
            ;;

        cherry-pick) _git_cherrypick
            return
            ;;

        citool) _git_citool
            return
            ;;

        clean) _git_clean
            return
            ;;

        clone) _git_clone
            return
            ;;

        commit) _git_commit
            return
            ;;

        describe) _git_describe
            return
            ;;

        diff) _git_diff
            return
            ;;

        fetch) _git_fetch
            return
            ;;

        format-patch) _git_formatpatch
            return
            ;;

        gc) _git_gc
            return
            ;;

        grep) _git_grep
            return
            ;;

        init) _git_init
            return
            ;;

        log) _git_log
            return
            ;;

        maintenance) _git_maintenance
            return
            ;;

        merge) _git_merge
            return
            ;;

        mv) _git_mv
            return
            ;;

        notes) _git_notes
            return
            ;;

        pull) _git_pull
            return
            ;;

        push) _git_push
            return
            ;;

        range-diff) _git_rangediff
            return
            ;;

        rebase) _git_rebase
            return
            ;;

        reset) _git_reset
            return
            ;;

        restore) _git_restore
            return
            ;;

        revert) _git_revert
            return
            ;;

        rm) _git_rm
            return
            ;;

        shortlog) _git_shortlog
            return
            ;;

        show) _git_show
            return
            ;;

        sparse-checkout) _git_sparsecheckout
            return
            ;;

        stash) _git_stash
            return
            ;;

        status) _git_status
            return
            ;;

        submodule) _git_submodule
            return
            ;;

        switch) _git_switch
            return
            ;;

        tag) _git_tag
            return
            ;;

        worktree) _git_worktree
            return
            ;;

        config) _git_config
            return
            ;;

        fast-export) _git_fastexport
            return
            ;;

        fast-import) _git_fastimport
            return
            ;;

        filter-branch) _git_filterbranch
            return
            ;;

        mergetool) _git_mergetool
            return
            ;;

        pack-refs) _git_packrefs
            return
            ;;

        prune) _git_prune
            return
            ;;

        reflog) _git_reflog
            return
            ;;

        remote) _git_remote
            return
            ;;

        repack) _git_repack
            return
            ;;

        replace) _git_replace
            return
            ;;

        annotate) _git_annotate
            return
            ;;

        blame) _git_blame
            return
            ;;

        bugreport) _git_bugreport
            return
            ;;

        count-objects) _git_countobjects
            return
            ;;

        difftool) _git_difftool
            return
            ;;

        fsck) _git_fsck
            return
            ;;

        gitweb) _git_gitweb
            return
            ;;

        help) _git_help
            return
            ;;

        instaweb) _git_instaweb
            return
            ;;

        merge-tree) _git_mergetree
            return
            ;;

        rerere) _git_rerere
            return
            ;;

        show-branch) _git_showbranch
            return
            ;;

        verify-commit) _git_verifycommit
            return
            ;;

        verify-tag) _git_verifytag
            return
            ;;

        whatchanged) _git_whatchanged
            return
            ;;

        imap-send) _git_imapsend
            return
            ;;

        p4) _git_p4
            return
            ;;

        quiltimport) _git_quiltimport
            return
            ;;

        request-pull) _git_requestpull
            return
            ;;

        svn) _git_svn
            return
            ;;

        apply) _git_apply
            return
            ;;

        checkout-index) _git_checkoutindex
            return
            ;;

        commit-graph) _git_commitgraph
            return
            ;;

        commit-tree) _git_committree
            return
            ;;

        hash-object) _git_hashobject
            return
            ;;

        index-pack) _git_indexpack
            return
            ;;

        merge-file) _git_mergefile
            return
            ;;

        merge-index) _git_mergeindex
            return
            ;;

        mktag) _git_mktag
            return
            ;;

        mktree) _git_mktree
            return
            ;;

        multi-pack-index) _git_multipackindex
            return
            ;;

        pack-objects) _git_packobjects
            return
            ;;

        prune-packed) _git_prunepacked
            return
            ;;

        read-tree) _git_readtree
            return
            ;;

        symbolic-ref) _git_symbolicref
            return
            ;;

        unpack-objects) _git_unpackobjects
            return
            ;;

        update-index) _git_updateindex
            return
            ;;

        update-ref) _git_updateref
            return
            ;;

        write-tree) _git_writetree
            return
            ;;

        cat-file) _git_catfile
            return
            ;;

        cherry) _git_cherry
            return
            ;;

        diff-files) _git_difffiles
            return
            ;;

        diff-index) _git_diffindex
            return
            ;;

        diff-tree) _git_difftree
            return
            ;;

        for-each-ref) _git_foreachref
            return
            ;;

        for-each-repo) _git_foreachrepo
            return
            ;;

        get-tar-commit-id) _git_gettarcommitid
            return
            ;;

        ls-files) _git_lsfiles
            return
            ;;

        ls-remote) _git_lsremote
            return
            ;;

        ls-tree) _git_lstree
            return
            ;;

        merge-base) _git_mergebase
            return
            ;;

        name-rev) _git_namerev
            return
            ;;

        pack-redundant) _git_packredundant
            return
            ;;

        rev-list) _git_revlist
            return
            ;;

        rev-parse) _git_revparse
            return
            ;;

        show-index) _git_showindex
            return
            ;;

        show-ref) _git_showref
            return
            ;;

        unpack-file) _git_unpackfile
            return
            ;;

        var) _git_var
            return
            ;;

        verify-pack) _git_verifypack
            return
            ;;

        daemon) _git_daemon
            return
            ;;

        fetch-pack) _git_fetchpack
            return
            ;;

        http-backend) _git_httpbackend
            return
            ;;

        send-pack) _git_sendpack
            return
            ;;

        update-server-info) _git_updateserverinfo
            return
            ;;

        check-attr) _git_checkattr
            return
            ;;

        check-ignore) _git_checkignore
            return
            ;;

        check-mailmap) _git_checkmailmap
            return
            ;;

        check-ref-format) _git_checkrefformat
            return
            ;;

        column) _git_column
            return
            ;;

        credential) _git_credential
            return
            ;;

        credential-cache) _git_credentialcache
            return
            ;;

        credential-store) _git_credentialstore
            return
            ;;

        fmt-merge-msg) _git_fmtmergemsg
            return
            ;;

        hook) _git_hook
            return
            ;;

        interpret-trailers) _git_interprettrailers
            return
            ;;

        mailinfo) _git_mailinfo
            return
            ;;

        mailsplit) _git_mailsplit
            return
            ;;

        merge-one-file) _git_mergeonefile
            return
            ;;

        patch-id) _git_patchid
            return
            ;;

        stripspace) _git_stripspace
            return
            ;;

    esac

    local word_list=" add am archive bisect branch bundle checkout cherry-pick citool clean clone commit describe diff fetch format-patch gc grep init log maintenance merge mv notes pull push range-diff rebase reset restore revert rm shortlog show sparse-checkout stash status submodule switch tag worktree config fast-export fast-import filter-branch mergetool pack-refs prune reflog remote repack replace annotate blame bugreport count-objects difftool fsck gitweb help instaweb merge-tree rerere show-branch verify-commit verify-tag whatchanged imap-send p4 quiltimport request-pull svn apply checkout-index commit-graph commit-tree hash-object index-pack merge-file merge-index mktag mktree multi-pack-index pack-objects prune-packed read-tree symbolic-ref unpack-objects update-index update-ref write-tree cat-file cherry diff-files diff-index diff-tree for-each-ref for-each-repo get-tar-commit-id ls-files ls-remote ls-tree merge-base name-rev pack-redundant rev-list rev-parse show-index show-ref unpack-file var verify-pack daemon fetch-pack http-backend send-pack update-server-info check-attr check-ignore check-mailmap check-ref-format column credential credential-cache credential-store fmt-merge-msg hook interpret-trailers mailinfo mailsplit merge-one-file patch-id stripspace "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_add()
{
    local word_list="  -n --dry-run -v --verbose -f --force --sparse -i --interactive -p --patch -e --edit -u --update -A --all --no-ignore-removal --no-all --ignore-removal -N --intent-to-add --refresh --ignore-errors --ignore-missing --no-warn-embedded-repo --renormalize --chmod --pathspec-from-file --pathspec-file-nul --"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_am()
{
    local word_list="  -s --signoff -k --keep --keep-non-patch --keep-cr --no-keep-cr -c --scissors --no-scissors --quoted-cr --empty -m --message-id --no-message-id -q --quiet -u --utf8 --no-utf8 -3 --3way --no-3way --rerere-autoupdate --no-rerere-autoupdate --ignore-space-change --ignore-whitespace --whitespace -C -p --directory --exclude --include --reject --patch-format -i --interactive --committer-date-is-author-date --ignore-date --skip -S --gpg-sign --no-gpg-sign --continue -r --resolved --resolvemsg --abort --quit --show-current-patch --allow-empty"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_archive()
{
    local word_list="  --format -l --list -v --verbose -o --output --add-file --add-virtual-file --worktree-attributes --remote --exec"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_bisect()
{
    local word_list="  --no-checkout --first-parent"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_branch()
{
    local word_list="  -d --delete -D --create-reflog -f --force -m --move -M -c --copy -C --color --no-color -i --ignore-case --column --no-column -r --remotes -a --all -l --list --show-current -v -vv --verbose -q --quiet --abbrev --no-abbrev -t --track --no-track --recurse-submodules --set-upstream -u --set-upstream-to --unset-upstream --edit-description --contains --no-contains --merged --no-merged --sort --points-at --format --contains --contains --contains --no-contains --no-contains"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_bundle()
{
    local word_list="  --progress --all-progress --all-progress-implied --version -q --quiet"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_checkout()
{
    local word_list="  -q --quiet --progress --no-progress -f --force --ours --theirs -b -B -t --track --no-track --guess --no-guess -l -d --detach --orphan --ignore-skip-worktree-bits -m --merge --conflict -p --patch --ignore-other-worktrees --overwrite-ignore --no-overwrite-ignore --recurse-submodules --no-recurse-submodules --overlay --no-overlay --pathspec-from-file --pathspec-file-nul --"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_cherrypick()
{
    local word_list="  -e --edit --cleanup -x -r -m --mainline -n --no-commit -s --signoff -S --gpg-sign --no-gpg-sign --ff --allow-empty --allow-empty-message --keep-redundant-commits --strategy -X --strategy-option --rerere-autoupdate --no-rerere-autoupdate --continue --skip --quit --abort"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_citool()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_clean()
{
    local word_list="  -d -f --force -i --interactive -n --dry-run -q --quiet -e --exclude -x -X"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_clone()
{
    local word_list="  -l --local --no-hardlinks -s --shared --reference --dissociate -q --quiet -v --verbose --progress --server-option -n --no-checkout --reject-shallow --no-reject-shallow --bare --sparse --filter --also-filter-submodules --mirror -o --origin -b --branch -u --upload-pack --template -c --config --depth --shallow-since --shallow-exclude --single-branch --no-single-branch --no-tags --recurse-submodules --shallow-submodules --no-shallow-submodules --remote-submodules --no-remote-submodules --separate-git-dir -j --jobs"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_commit()
{
    local word_list="  -a --all -p --patch -C --reuse-message -c --reedit-message --fixup --squash --reset-author --short --branch --porcelain --long -z --null -F --file --author --date -m --message -t --template -s --signoff --no-signoff --trailer -n --verify -n --no-verify --allow-empty --allow-empty-message --cleanup -e --edit --no-edit --amend --no-post-rewrite -i --include -o --only --pathspec-from-file --pathspec-file-nul -u --untracked-files -v --verbose -q --quiet --dry-run --status --no-status -S --gpg-sign --no-gpg-sign --"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_describe()
{
    local word_list="  --dirty --broken --all --tags --contains --abbrev --candidates --exact-match --debug --long --match --exclude --always --first-parent"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_diff()
{
    local word_list="  -p -u --patch -s --no-patch -U --unified --output --output-indicator-new --output-indicator-old --output-indicator-context --raw --patch-with-raw --indent-heuristic --no-indent-heuristic --minimal --patience --histogram --anchored --diff-algorithm --stat --compact-summary --numstat --shortstat -X --dirstat --cumulative --dirstat-by-file --summary --patch-with-stat -z --name-only --name-status --submodule --color --no-color --color-moved --no-color-moved --color-moved-ws --no-color-moved-ws --word-diff --word-diff-regex --color-words --no-renames --rename-empty --no-rename-empty --check --ws-error-highlight --full-index --binary --abbrev -B --break-rewrites -M --find-renames -C --find-copies --find-copies-harder -D --irreversible-delete -l --diff-filter -S -G --find-object --pickaxe-all --pickaxe-regex -O --skip-to --rotate-to -R --relative --no-relative -a --text --ignore-cr-at-eol --ignore-space-at-eol -b --ignore-space-change -w --ignore-all-space --ignore-blank-lines -I --ignore-matching-lines --inter-hunk-context -W --function-context --exit-code --quiet --ext-diff --no-ext-diff --textconv --no-textconv --ignore-submodules --src-prefix --dst-prefix --no-prefix --line-prefix --ita-invisible-in-index -1 --base -2 --ours -3 --theirs -0 -static"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_fetch()
{
    local word_list="  --all -a --append --atomic --depth --deepen --shallow-since --shallow-exclude --unshallow --update-shallow --negotiation-tip --negotiate-only --dry-run --write-fetch-head --no-write-fetch-head -f --force -k --keep --multiple --write-commit-graph --no-write-commit-graph --prefetch -p --prune -P --prune-tags -n --no-tags --refetch --refmap -t --tags --recurse-submodules -j --jobs --no-recurse-submodules --set-upstream --submodule-prefix --recurse-submodules-default -u --update-head-ok --upload-pack -q --quiet -v --verbose --progress -o --server-option --show-forced-updates --no-show-forced-updates -4 --ipv4 -6 --ipv6 --stdin"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_formatpatch()
{
    local word_list="  -p --no-stat -U --unified --output --output-indicator-new --output-indicator-old --output-indicator-context --indent-heuristic --no-indent-heuristic --minimal --patience --histogram --anchored --diff-algorithm --stat --compact-summary --numstat --shortstat -X --dirstat --cumulative --dirstat-by-file --summary --no-renames --rename-empty --no-rename-empty --full-index --binary --abbrev -B --break-rewrites -M --find-renames -C --find-copies --find-copies-harder -D --irreversible-delete -l -O --skip-to --rotate-to --relative --no-relative -a --text --ignore-cr-at-eol --ignore-space-at-eol -b --ignore-space-change -w --ignore-all-space --ignore-blank-lines -I --ignore-matching-lines --inter-hunk-context -W --function-context --ext-diff --no-ext-diff --textconv --no-textconv --ignore-submodules --src-prefix --dst-prefix --no-prefix --line-prefix --ita-invisible-in-index -o --output-directory -n --numbered -N --no-numbered --start-number --numbered-files -k --keep-subject -s --signoff --stdout --attach --no-attach --inline --thread --no-thread --in-reply-to --ignore-if-in-upstream --always --cover-from-description --subject-prefix --filename-max-length --rfc -v --reroll-count --to --cc --from --add-header --cover-letter --no-cover-letter --encode-email-headers --no-encode-email-headers --interdiff --range-diff --creation-factor --notes --no-notes --signature --no-signature --signature-file --suffix -q --quiet --no-binary --zero-commit --root --progress"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_gc()
{
    local word_list="  --aggressive --auto --cruft --prune --no-prune --quiet --force --keep-largest-pack"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_grep()
{
    local word_list="  --cached --no-index --untracked --no-exclude-standard --exclude-standard --recurse-submodules -a --text --textconv --no-textconv -i --ignore-case -I --max-depth -r --recursive --no-recursive -w --word-regexp -v --invert-match -h -H --full-name -E --extended-regexp -G --basic-regexp -P --perl-regexp -F --fixed-strings -n --line-number --column -l --files-with-matches --name-only -L --files-without-match -O --open-files-in-pager -z --null -o --only-matching -c --count --color --no-color --break --heading -p --show-function -C --context -A --after-context -B --before-context -W --function-context --threads -f -e --all-match -q --quiet --"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_init()
{
    local word_list="  -q --quiet --bare --object-format --template --separate-git-dir -b --initial-branch --shared"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_log()
{
    local word_list="  --follow --no-decorate --decorate --decorate-refs --decorate-refs-exclude --source --full-diff --log-size --skip --since --after --since-as-filter --until --before --author --committer --grep-reflog --grep --all-match --invert-grep -i --regexp-ignore-case --basic-regexp -E --extended-regexp -F --fixed-strings -P --perl-regexp --remove-empty --merges --no-merges --min-parents --max-parents --no-min-parents --no-max-parents --first-parent --exclude-first-parent-only --not --all --branches --tags --remotes --glob --exclude --reflog --alternate-refs --single-worktree --ignore-missing --bisect --stdin --cherry-mark --cherry-pick --left-only --right-only --cherry -g --walk-reflogs --merge --boundary --simplify-by-decoration --show-pulls --full-history --dense --sparse --simplify-merges --ancestry-path --dense --sparse --simplify-merges --show-pulls --date-order --author-date-order --topo-order --reverse --no-walk --do-walk --pretty --format --abbrev-commit --no-abbrev-commit --oneline --encoding --expand-tabs --no-expand-tabs --notes --no-notes --show-signature --relative-date --date --parents --children --left-right --graph --show-linear-break -p -u --patch -s --no-patch --diff-merges --no-diff-merges --combined-all-paths -U --unified --output --output-indicator-new --output-indicator-old --output-indicator-context --raw --patch-with-raw -t --indent-heuristic --no-indent-heuristic --minimal --patience --histogram --anchored --diff-algorithm --stat --compact-summary --numstat --shortstat -X --dirstat --cumulative --dirstat-by-file --summary --patch-with-stat -z --name-only --name-status --submodule --color --no-color --color-moved --no-color-moved --color-moved-ws --no-color-moved-ws --word-diff --word-diff-regex --color-words --no-renames --rename-empty --no-rename-empty --check --ws-error-highlight --full-index --binary --abbrev -B --break-rewrites -M --find-renames -C --find-copies --find-copies-harder -D --irreversible-delete -l --diff-filter -S -G --find-object --pickaxe-all --pickaxe-regex -O --skip-to --rotate-to -R --relative --no-relative -a --text --ignore-cr-at-eol --ignore-space-at-eol -b --ignore-space-change -w --ignore-all-space --ignore-blank-lines -I --ignore-matching-lines --inter-hunk-context -W --function-context --ext-diff --no-ext-diff --textconv --no-textconv --ignore-submodules --src-prefix --dst-prefix --no-prefix --line-prefix --ita-invisible-in-index -static"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_maintenance()
{
    local word_list="  --auto --schedule --quiet --task --scheduler"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_merge()
{
    local word_list="  --commit --no-commit --edit -e --no-edit --cleanup --ff --no-ff --ff-only -S --gpg-sign --no-gpg-sign --log --no-log --signoff --no-signoff --stat -n --no-stat --squash --no-squash --verify --no-verify -s --strategy -X --strategy-option --verify-signatures --no-verify-signatures --summary --no-summary -q --quiet -v --verbose --progress --no-progress --autostash --no-autostash --allow-unrelated-histories -m --into-name -F --file --rerere-autoupdate --no-rerere-autoupdate --overwrite-ignore --no-overwrite-ignore --abort --quit --continue"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_mv()
{
    local word_list="  -f --force -k -n --dry-run -v --verbose"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_notes()
{
    local word_list="  -f --force -m --message -F --file -C --reuse-message -c --reedit-message --allow-empty --ref --ignore-missing --stdin -n --dry-run -s --strategy --commit --abort -q --quiet -v --verbose"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_pull()
{
    local word_list="  -q --quiet -v --verbose --commit --no-commit --edit -e --no-edit --cleanup --ff-only --ff --no-ff -S --gpg-sign --no-gpg-sign --log --no-log --signoff --no-signoff --stat -n --no-stat --squash --no-squash --verify --no-verify -s --strategy -X --strategy-option --verify-signatures --no-verify-signatures --summary --no-summary --autostash --no-autostash --allow-unrelated-histories -r --rebase --no-rebase --all -a --append --atomic --depth --deepen --shallow-since --shallow-exclude --unshallow --update-shallow --negotiation-tip --negotiate-only --dry-run -f --force -k --keep --prefetch -p --prune --no-tags --refmap -t --tags -j --jobs --set-upstream --upload-pack --progress -o --server-option --show-forced-updates --no-show-forced-updates -4 --ipv4 -6 --ipv6"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_push()
{
    local word_list="  --all --prune --mirror -n --dry-run --porcelain -d --delete --tags --follow-tags --signed --no-signed --signed --atomic --no-atomic -o --push-option --receive-pack --exec --force-with-lease --no-force-with-lease --force-with-lease -f --force --force-if-includes --no-force-if-includes --repo -u --set-upstream --thin --no-thin -q --quiet -v --verbose --progress --no-recurse-submodules --recurse-submodules --verify --no-verify -4 --ipv4 -6 --ipv6"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_rangediff()
{
    local word_list="  --no-dual-color --creation-factor --left-only --right-only -TODO"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_rebase()
{
    local word_list="  --root --onto --keep-base --continue --abort --quit --apply --empty --no-keep-empty --keep-empty --reapply-cherry-picks --no-reapply-cherry-picks --allow-empty-message --skip --edit-todo --show-current-patch -m --merge -s --strategy -X --strategy-option --rerere-autoupdate --no-rerere-autoupdate -S --gpg-sign --no-gpg-sign -q --quiet -v --verbose --stat -n --no-stat --no-verify --verify -C --no-ff --force-rebase -f --fork-point --no-fork-point --ignore-whitespace --whitespace --committer-date-is-author-date --ignore-date --reset-author-date --signoff -i --interactive -r --rebase-merges -x --exec --autosquash --no-autosquash --autostash --no-autostash --reschedule-failed-exec --no-reschedule-failed-exec"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_reset()
{
    local word_list="  --soft --mixed --hard --merge --keep --recurse-submodules --no-recurse-submodules -q --quiet --refresh --no-refresh --pathspec-from-file --pathspec-file-nul --"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_restore()
{
    local word_list="  -s --source -p --patch -W --worktree -S --staged -q --quiet --progress --no-progress --ours --theirs -m --merge --conflict --ignore-unmerged --ignore-skip-worktree-bits --recurse-submodules --no-recurse-submodules --overlay --no-overlay --pathspec-from-file --pathspec-file-nul --"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_revert()
{
    local word_list="  -e --edit -m --mainline --no-edit --cleanup -n --no-commit -S --gpg-sign --no-gpg-sign -s --signoff --strategy -X --strategy-option --rerere-autoupdate --no-rerere-autoupdate --reference --continue --skip --quit --abort"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_rm()
{
    local word_list="  -f --force -n --dry-run -r -- --cached --ignore-unmatch --sparse -q --quiet --pathspec-from-file --pathspec-file-nul"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_shortlog()
{
    local word_list="  -n --numbered -s --summary -e --email --format --group -c --committer -w --skip --since --after --since-as-filter --until --before --author --committer --grep-reflog --grep --all-match --invert-grep -i --regexp-ignore-case --basic-regexp -E --extended-regexp -F --fixed-strings -P --perl-regexp --remove-empty --merges --no-merges --min-parents --max-parents --no-min-parents --no-max-parents --first-parent --exclude-first-parent-only --not --all --branches --tags --remotes --glob --exclude --reflog --alternate-refs --single-worktree --ignore-missing --bisect --stdin --cherry-mark --cherry-pick --left-only --right-only --cherry -g --walk-reflogs --merge --boundary --simplify-by-decoration --show-pulls --full-history --dense --sparse --simplify-merges --ancestry-path --dense --sparse --simplify-merges --show-pulls"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_show()
{
    local word_list="  --pretty --format --abbrev-commit --no-abbrev-commit --oneline --encoding --expand-tabs --no-expand-tabs --notes --no-notes --show-signature -p -u --patch -s --no-patch --diff-merges --no-diff-merges --combined-all-paths -U --unified --output --output-indicator-new --output-indicator-old --output-indicator-context --raw --patch-with-raw -t --indent-heuristic --no-indent-heuristic --minimal --patience --histogram --anchored --diff-algorithm --stat --compact-summary --numstat --shortstat -X --dirstat --cumulative --dirstat-by-file --summary --patch-with-stat -z --name-only --name-status --submodule --color --no-color --color-moved --no-color-moved --color-moved-ws --no-color-moved-ws --word-diff --word-diff-regex --color-words --no-renames --rename-empty --no-rename-empty --check --ws-error-highlight --full-index --binary --abbrev -B --break-rewrites -M --find-renames -C --find-copies --find-copies-harder -D --irreversible-delete -l --diff-filter -S -G --find-object --pickaxe-all --pickaxe-regex -O --skip-to --rotate-to -R --relative --no-relative -a --text --ignore-cr-at-eol --ignore-space-at-eol -b --ignore-space-change -w --ignore-all-space --ignore-blank-lines -I --ignore-matching-lines --inter-hunk-context -W --function-context --ext-diff --no-ext-diff --textconv --no-textconv --ignore-submodules --src-prefix --dst-prefix --no-prefix --line-prefix --ita-invisible-in-index -static"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_sparsecheckout()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_stash()
{
    local word_list="  -a --all -u --include-untracked --no-include-untracked --only-untracked --index -k --keep-index --no-keep-index -p --patch -S --staged --pathspec-from-file --pathspec-file-nul -q --quiet --"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_status()
{
    local word_list="  -s --short -b --branch --show-stash --porcelain --long -v --verbose -u --untracked-files --ignore-submodules --ignored -z --column --no-column --ahead-behind --no-ahead-behind --renames --no-renames --find-renames"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_submodule()
{
    local word_list="  -q --quiet --progress --all -b --branch -f --force --cached --files -n --summary-limit --remote -N --no-fetch --checkout --merge --rebase --init --name --reference --dissociate --recursive --depth --recommend-shallow --no-recommend-shallow -j --jobs --single-branch --no-single-branch"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_switch()
{
    local word_list="  -c --create -C --force-create -d --detach --guess --no-guess -f --force --discard-changes -m --merge --conflict -q --quiet --progress --no-progress -t --track --no-track --orphan --ignore-other-worktrees --recurse-submodules --no-recurse-submodules"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_tag()
{
    local word_list="  -a --annotate -s --sign --no-sign -u --local-user -f --force -d --delete -v --verify -n -l --list --sort --color -i --ignore-case --column --no-column --contains --no-contains --merged --no-merged --points-at -m --message -F --file -e --edit --cleanup --create-reflog --format"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_worktree()
{
    local word_list="  -f --force -b -B -d --detach --checkout --no-checkout --guess-remote --no-guess-remote --track --no-track --lock -n --dry-run --porcelain -z -q --quiet -v --verbose --expire --reason"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_config()
{
    local word_list="  --replace-all --add --get --get-all --get-regexp --get-urlmatch --global --system --local --worktree -f --file --blob --remove-section --rename-section --unset --unset-all -l --list --fixed-value --type --bool --int --bool-or-int --path --expiry-date --no-type -z --null --name-only --show-origin --show-scope --get-colorbool --get-color -e --edit --includes --no-includes --default"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_fastexport()
{
    local word_list="  --progress --signed-tags --tag-of-filtered-object -M -C --export-marks --import-marks --mark-tags --fake-missing-tagger --use-done-feature --no-data --full-tree --anonymize --anonymize-map --reference-excluded-parents --show-original-ids --reencode --refspec"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_fastimport()
{
    local word_list="  --force --quiet --stats --allow-unsafe-features --cat-blob-fd --date-format --done --export-marks --import-marks --import-marks-if-exists --relative-marks --no-relative-marks --rewrite-submodules-from --rewrite-submodules-to --active-branches --big-file-threshold --depth --export-pack-edges --max-pack-size"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_filterbranch()
{
    local word_list="  --setup --subdirectory-filter --env-filter --tree-filter --index-filter --parent-filter --msg-filter --commit-filter --tag-name-filter --prune-empty --original -d -f --force --state-branch"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_mergetool()
{
    local word_list="  -t --tool --tool-help -y --no-prompt --prompt -g --gui --no-gui -O"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_packrefs()
{
    local word_list="  --all --no-prune"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_prune()
{
    local word_list="  -n --dry-run -v --verbose --progress --expire --"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_reflog()
{
    local word_list="  --all --single-worktree --expire --expire-unreachable --updateref --rewrite --stale-fix -n --dry-run --verbose"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_remote()
{
    local word_list="  -v --verbose"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_repack()
{
    local word_list="  -a -A -d --cruft --cruft-expiration -l -f -F -q --quiet -n --window --depth --threads --window-memory --max-pack-size -b --write-bitmap-index --pack-kept-objects --keep-pack --unpack-unreachable -k --keep-unreachable -i --delta-islands -g --geometric -m --write-midx"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_replace()
{
    local word_list="  -f --force -d --delete --edit --raw --graft --convert-graft-file -l --list --format"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_annotate()
{
    local word_list="  -b --root --show-stats -l -t -S --reverse --first-parent -p --porcelain --line-porcelain --incremental --encoding --contents --date --progress --no-progress -M -C --ignore-rev --ignore-revs-file --color-lines --color-by-age -h"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_blame()
{
    local word_list="  -b --root --show-stats -l -t -S --reverse --first-parent -p --porcelain --line-porcelain --incremental --encoding --contents --date --progress --no-progress -M -C --ignore-rev --ignore-revs-file --color-lines --color-by-age -h -c --score-debug -f --show-name -n --show-number -s -e --show-email -w --abbrev"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_bugreport()
{
    local word_list="  -o --output-directory -s --suffix"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_countobjects()
{
    local word_list="  -v --verbose -H --human-readable"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_difftool()
{
    local word_list="  -d --dir-diff -y --no-prompt --prompt --rotate-to --skip-to -t --tool --tool-help --symlinks --no-symlinks -x --extcmd -g --gui -g --no-gui --trust-exit-code --no-trust-exit-code"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_fsck()
{
    local word_list="  --unreachable --dangling --no-dangling --root --tags --cache --no-reflogs --full --connectivity-only --strict --verbose --lost-found --name-objects --progress --no-progress"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_gitweb()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_help()
{
    local word_list="  -a --all --no-external-commands --no-aliases --verbose -c --config -g --guides -i --info -m --man -w --web"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_instaweb()
{
    local word_list="  -l --local -d --httpd -m --module-path -p --port -b --browser"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_mergetree()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_rerere()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_showbranch()
{
    local word_list="  -r --remotes -a --all --current --topo-order --date-order --sparse --more --list --merge-base --independent --no-name --sha1-name --topics -g --reflog --color --no-color"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_verifycommit()
{
    local word_list="  --raw -v --verbose"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_verifytag()
{
    local word_list="  --raw -v --verbose"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_whatchanged()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_imapsend()
{
    local word_list="  -v --verbose -q --quiet --curl --no-curl"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_p4()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_quiltimport()
{
    local word_list="  -n --dry-run --author --patches --series --keep-non-patch"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_requestpull()
{
    local word_list="  -p"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_svn()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_apply()
{
    local word_list="  --stat --numstat --summary --check --index --cached --intent-to-add -3 --3way --build-fake-ancestor -R --reverse --reject -z -p -C --unidiff-zero --apply --no-add --allow-binary-replacement --binary --exclude --include --ignore-space-change --ignore-whitespace --whitespace --inaccurate-eof -v --verbose -q --quiet --recount --directory --unsafe-paths --allow-empty"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_checkoutindex()
{
    local word_list="  -u --index -q --quiet -f --force -a --all -n --no-create --prefix --stage --temp --ignore-skip-worktree-bits --stdin -z --"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_commitgraph()
{
    local word_list="  --object-dir --progress --no-progress"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_committree()
{
    local word_list="  -p -m -F -S --gpg-sign --no-gpg-sign"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_hashobject()
{
    local word_list="  -t -w --stdin --stdin-paths --path --no-filters --literally"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_indexpack()
{
    local word_list="  -v -o --rev-index --no-rev-index --stdin --fix-thin --keep --keep --index-version --strict --progress-title --check-self-contained-and-connected --fsck-objects --threads --max-input-size --object-format --promisor"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_mergefile()
{
    local word_list="  -L -p -q --diff3 --zdiff3 --ours --theirs --union"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_mergeindex()
{
    local word_list="  -- -a -o -q"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_mktag()
{
    local word_list="  --strict"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_mktree()
{
    local word_list="  -z --missing --batch"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_multipackindex()
{
    local word_list="  --preferred-pack --bitmap --no-bitmap --stdin-packs --refs-snapshot"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_packobjects()
{
    local word_list="  --stdout --revs --unpacked --all --include-tag --stdin-packs --cruft --cruft-expiration --window --depth --window-memory --max-pack-size --honor-pack-keep --keep-pack --incremental --local --non-empty --progress --all-progress --all-progress-implied -q --no-reuse-delta --no-reuse-object --compression --sparse --no-sparse --thin --shallow --delta-base-offset --threads --index-version --keep-true-parents --filter --no-filter --missing --exclude-promisor-objects --keep-unreachable --pack-loose-unreachable --unpack-unreachable --delta-islands"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_prunepacked()
{
    local word_list="  -n --dry-run -q --quiet"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_readtree()
{
    local word_list="  -m --reset -u -i -n --dry-run -v --trivial --aggressive --prefix --index-output --recurse-submodules --no-recurse-submodules --no-sparse-checkout --empty -q --quiet"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_symbolicref()
{
    local word_list="  -d --delete -q --quiet --short -m"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_unpackobjects()
{
    local word_list="  -n -q -r --strict --max-input-size"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_updateindex()
{
    local word_list="  --add --remove --refresh -q --ignore-submodules --unmerged --ignore-missing --cacheinfo --index-info --chmod --assume-unchanged --no-assume-unchanged --really-refresh --skip-worktree --no-skip-worktree --ignore-skip-worktree-entries --no-ignore-skip-worktree-entries --fsmonitor-valid --no-fsmonitor-valid -g --again --unresolve --info-only --force-remove --replace --stdin --verbose --index-version -z --split-index --no-split-index --untracked-cache --no-untracked-cache --test-untracked-cache --force-untracked-cache --fsmonitor --no-fsmonitor --"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_updateref()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_writetree()
{
    local word_list="  --missing-ok"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_catfile()
{
    local word_list="  -t -s -e -p --textconv --filters --path --batch --batch-check --batch-command --batch-all-objects --buffer --unordered --allow-unknown-type --follow-symlinks"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_cherry()
{
    local word_list="  -v"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_difffiles()
{
    local word_list="  -p -u --patch -s --no-patch -U --unified --output --output-indicator-new --output-indicator-old --output-indicator-context --raw --patch-with-raw --indent-heuristic --no-indent-heuristic --minimal --patience --histogram --anchored --diff-algorithm --stat --compact-summary --numstat --shortstat -X --dirstat --cumulative --dirstat-by-file --summary --patch-with-stat -z --name-only --name-status --submodule --color --no-color --color-moved --no-color-moved --color-moved-ws --no-color-moved-ws --word-diff --word-diff-regex --color-words --no-renames --rename-empty --no-rename-empty --check --ws-error-highlight --full-index --binary --abbrev -B --break-rewrites -M --find-renames -C --find-copies --find-copies-harder -D --irreversible-delete -l --diff-filter -S -G --find-object --pickaxe-all --pickaxe-regex -O --skip-to --rotate-to -R --relative --no-relative -a --text --ignore-cr-at-eol --ignore-space-at-eol -b --ignore-space-change -w --ignore-all-space --ignore-blank-lines -I --ignore-matching-lines --inter-hunk-context -W --function-context --exit-code --quiet --ext-diff --no-ext-diff --textconv --no-textconv --ignore-submodules --src-prefix --dst-prefix --no-prefix --line-prefix --ita-invisible-in-index -1 --base -2 --ours -3 --theirs -0 -c --cc -q -static"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_diffindex()
{
    local word_list="  -p -u --patch -s --no-patch -U --unified --output --output-indicator-new --output-indicator-old --output-indicator-context --raw --patch-with-raw --indent-heuristic --no-indent-heuristic --minimal --patience --histogram --anchored --diff-algorithm --stat --compact-summary --numstat --shortstat -X --dirstat --cumulative --dirstat-by-file --summary --patch-with-stat -z --name-only --name-status --submodule --color --no-color --color-moved --no-color-moved --color-moved-ws --no-color-moved-ws --word-diff --word-diff-regex --color-words --no-renames --rename-empty --no-rename-empty --check --ws-error-highlight --full-index --binary --abbrev -B --break-rewrites -M --find-renames -C --find-copies --find-copies-harder -D --irreversible-delete -l --diff-filter -S -G --find-object --pickaxe-all --pickaxe-regex -O --skip-to --rotate-to -R --relative --no-relative -a --text --ignore-cr-at-eol --ignore-space-at-eol -b --ignore-space-change -w --ignore-all-space --ignore-blank-lines -I --ignore-matching-lines --inter-hunk-context -W --function-context --exit-code --quiet --ext-diff --no-ext-diff --textconv --no-textconv --ignore-submodules --src-prefix --dst-prefix --no-prefix --line-prefix --ita-invisible-in-index --cached --merge-base -m -static"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_difftree()
{
    local word_list="  -p -u --patch -s --no-patch -U --unified --output --output-indicator-new --output-indicator-old --output-indicator-context --raw --patch-with-raw --indent-heuristic --no-indent-heuristic --minimal --patience --histogram --anchored --diff-algorithm --stat --compact-summary --numstat --shortstat -X --dirstat --cumulative --dirstat-by-file --summary --patch-with-stat -z --name-only --name-status --submodule --color --no-color --color-moved --no-color-moved --color-moved-ws --no-color-moved-ws --word-diff --word-diff-regex --color-words --no-renames --rename-empty --no-rename-empty --check --ws-error-highlight --full-index --binary --abbrev -B --break-rewrites -M --find-renames -C --find-copies --find-copies-harder -D --irreversible-delete -l --diff-filter -S -G --find-object --pickaxe-all --pickaxe-regex -O --skip-to --rotate-to -R --relative --no-relative -a --text --ignore-cr-at-eol --ignore-space-at-eol -b --ignore-space-change -w --ignore-all-space --ignore-blank-lines -I --ignore-matching-lines --inter-hunk-context -W --function-context --exit-code --quiet --ext-diff --no-ext-diff --textconv --no-textconv --ignore-submodules --src-prefix --dst-prefix --no-prefix --line-prefix --ita-invisible-in-index -r -t --root --merge-base --stdin -m -v --pretty --format --abbrev-commit --no-abbrev-commit --oneline --encoding --expand-tabs --no-expand-tabs --notes --no-notes --show-signature --no-commit-id -c --cc --combined-all-paths --always -static"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_foreachref()
{
    local word_list="  --count --sort --format --color --shell --perl --python --tcl --points-at --merged --no-merged --contains --no-contains --ignore-case --format"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_foreachrepo()
{
    local word_list="  --config"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_gettarcommitid()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_lsfiles()
{
    local word_list="  -c --cached -d --deleted -m --modified -o --others -i --ignored -s --stage --directory --no-empty-directory -u --unmerged -k --killed -z --deduplicate -x --exclude -X --exclude-from --exclude-per-directory --exclude-standard --error-unmatch --with-tree -t -v -f --full-name --recurse-submodules --abbrev --debug --eol --sparse --"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_lsremote()
{
    local word_list="  -h --heads -t --tags --refs -q --quiet --upload-pack --exit-code --get-url --symref --sort -o --server-option"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_lstree()
{
    local word_list="  -d -r -t -l --long -z --name-only --name-status --object-only --abbrev --full-name --full-tree --format"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_mergebase()
{
    local word_list="  --octopus --independent --is-ancestor --fork-point -a --all"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_namerev()
{
    local word_list="  --tags --refs --exclude --all --annotate-stdin --stdin --name-only --no-undefined --always"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_packredundant()
{
    local word_list="  --all --alt-odb --verbose"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_revlist()
{
    local word_list="  --skip --since --after --since-as-filter --until --before --max-age --min-age --author --committer --grep-reflog --grep --all-match --invert-grep -i --regexp-ignore-case --basic-regexp -E --extended-regexp -F --fixed-strings -P --perl-regexp --remove-empty --merges --no-merges --min-parents --max-parents --no-min-parents --no-max-parents --first-parent --exclude-first-parent-only --not --all --branches --tags --remotes --glob --exclude --reflog --alternate-refs --single-worktree --ignore-missing --stdin --quiet --disk-usage --cherry-mark --cherry-pick --left-only --right-only --cherry -g --walk-reflogs --merge --boundary --use-bitmap-index --progress --simplify-by-decoration --show-pulls --full-history --dense --sparse --simplify-merges --ancestry-path --dense --sparse --simplify-merges --show-pulls --bisect --bisect-vars --bisect-all --date-order --author-date-order --topo-order --reverse --objects --in-commit-order --objects-edge --objects-edge-aggressive --indexed-objects --unpacked --object-names --no-object-names --filter --no-filter --filter-provided-objects --filter-print-omitted --missing --exclude-promisor-objects --no-walk --do-walk --pretty --format --abbrev-commit --no-abbrev-commit --oneline --encoding --expand-tabs --no-expand-tabs --show-signature --relative-date --date --header --no-commit-header --commit-header --parents --children --timestamp --left-right --graph --show-linear-break --count"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_revparse()
{
    local word_list="  --parseopt --sq-quote --keep-dashdash --stop-at-non-option --stuck-long --revs-only --no-revs --flags --no-flags --default --prefix --verify -q --quiet --sq --short --not --abbrev-ref --symbolic --symbolic-full-name --all --branches --tags --remotes --glob --exclude --disambiguate --local-env-vars --path-format --git-dir --git-common-dir --resolve-git-dir --git-path --show-toplevel --show-superproject-working-tree --shared-index-path --absolute-git-dir --is-inside-git-dir --is-inside-work-tree --is-bare-repository --is-shallow-repository --show-cdup --show-prefix --show-object-format --since --after --until --before -h --help --foo --bar --baz --qux -C"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_showindex()
{
    local word_list="  --object-format"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_showref()
{
    local word_list="  --head --heads --tags -d --dereference -s --hash --verify --abbrev -q --quiet --exclude-existing"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_unpackfile()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_var()
{
    local word_list="  -l"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_verifypack()
{
    local word_list="  -v --verbose -s --stat-only --"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_daemon()
{
    local word_list="  --strict-paths --base-path --base-path-relaxed --interpolated-path --export-all --inetd --listen --port --init-timeout --timeout --max-connections --syslog --log-destination --user-path --verbose --reuseaddr --detach --pid-file --user --group --enable --disable --allow-override --forbid-override --informative-errors --no-informative-errors --access-hook"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_fetchpack()
{
    local word_list="  --all --stdin -q --quiet -k --keep --thin --include-tag --upload-pack --exec --depth --shallow-since --shallow-exclude --deepen-relative --refetch --no-progress --check-self-contained-and-connected -v"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_httpbackend()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_sendpack()
{
    local word_list="  --receive-pack --exec --all --stdin --dry-run --force --verbose --thin --atomic --signed --no-signed --signed --push-option"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_updateserverinfo()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_checkattr()
{
    local word_list="  -a --all --cached --stdin -z --"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_checkignore()
{
    local word_list="  -q --quiet -v --verbose --stdin -z -n --non-matching --no-index"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_checkmailmap()
{
    local word_list="  --stdin"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_checkrefformat()
{
    local word_list="  --allow-onelevel --no-allow-onelevel --refspec-pattern --normalize"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_column()
{
    local word_list="  --command --mode --raw-mode --width --indent --nl --padding"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_credential()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_credentialcache()
{
    local word_list="  --timeout --socket"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_credentialstore()
{
    local word_list="  --file"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_fmtmergemsg()
{
    local word_list="  --log --no-log --summary --no-summary -m --message --into-name -F --file"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_hook()
{
    local word_list="  --ignore-missing"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_interprettrailers()
{
    local word_list="  --in-place --trim-empty --trailer --where --no-where --if-exists --no-if-exists --if-missing --no-if-missing --only-trailers --only-input --unfold --parse --no-divider"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_mailinfo()
{
    local word_list="  -k -b -u --encoding -n -m --message-id --scissors --no-scissors --quoted-cr"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_mailsplit()
{
    local word_list="  -o -b -d -f --keep-cr --mboxrd"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_mergeonefile()
{
    local word_list="  "
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_patchid()
{
    local word_list="  --stable --unstable"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

_git_stripspace()
{
    local word_list="  -s --strip-comments -c --comment-lines"
    COMPREPLY=( $(compgen -W "${word_list}" -- "$cur") )
}

## -o bashdefault and -o default are fallback
complete -o bashdefault -o default -F _git git
